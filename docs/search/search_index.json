{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available. Commands There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options Ready configs for style guides Will be implemented later.","title":"Home"},{"location":"index.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available.","title":"Uncrustify configuration examples"},{"location":"index.html#commands","text":"There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options","title":"Commands"},{"location":"index.html#ready-configs-for-style-guides","text":"Will be implemented later.","title":"Ready configs for style guides"},{"location":"about.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"About"},{"location":"about.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"Uncrustify configuration examples"},{"location":"sp_assign.html","text":"sp_assign This page content wasn't created yet.","title":"sp_assign"},{"location":"sp_assign.html#sp_assign","text":"This page content wasn't created yet.","title":"sp_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html","text":"sp_cpp_lambda_assign Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign . Values Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around = Examples Add Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; }; Force Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#sp_cpp_lambda_assign","text":"Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign .","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#values","text":"Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around =","title":"Values"},{"location":"spacing_options/sp_cpp_lambda_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_assign.html#add","text":"Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_assign.html#force","text":"Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_cpp_lambda_paren.html","text":"sp_cpp_lambda_paren Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force . Examples Add Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; Force Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#sp_cpp_lambda_paren","text":"Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force .","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_paren.html#add","text":"Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_paren.html#force","text":"Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Force"}]}