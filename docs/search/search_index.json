{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available. More info on configuration options The uncrustify itself is a good source of information. Try uncrustify --show-config and read until end of file. Also demo page of this project has a lot of examples Commands There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options Ready configs for style guides Will be implemented later.","title":"<"},{"location":"index.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available.","title":"Uncrustify configuration examples"},{"location":"index.html#more-info-on-configuration-options","text":"The uncrustify itself is a good source of information. Try uncrustify --show-config and read until end of file. Also demo page of this project has a lot of examples","title":"More info on configuration options"},{"location":"index.html#commands","text":"There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options","title":"Commands"},{"location":"index.html#ready-configs-for-style-guides","text":"Will be implemented later.","title":"Ready configs for style guides"},{"location":"about.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"About"},{"location":"about.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"Uncrustify configuration examples"},{"location":"google_style.html","text":"Config for \"Google C++ Style Guide\" The \" Google C++ Style Guide \" is detailed. Formatting Line length Google recommends 80 character limit for line length. Uncrustify has two options: code_width for code and cmt_width for comments. code_width = 80 cmt_width = 80 Also Google allows some exceptions from this rule. Indent The guide specifies \"Use only spaces, and indent 2 spaces at a time.\" Config for this rule is indent_with_tabs = 1 indent_columns = 2 Full config TBD","title":"Config for \"Google C++ Style Guide\""},{"location":"google_style.html#config-for-google-c-style-guide","text":"The \" Google C++ Style Guide \" is detailed.","title":"Config for \"Google C++ Style Guide\""},{"location":"google_style.html#formatting","text":"","title":"Formatting"},{"location":"google_style.html#line-length","text":"Google recommends 80 character limit for line length. Uncrustify has two options: code_width for code and cmt_width for comments. code_width = 80 cmt_width = 80 Also Google allows some exceptions from this rule.","title":"Line length"},{"location":"google_style.html#indent","text":"The guide specifies \"Use only spaces, and indent 2 spaces at a time.\" Config for this rule is indent_with_tabs = 1 indent_columns = 2","title":"Indent"},{"location":"google_style.html#full-config","text":"TBD","title":"Full config"},{"location":"options_list.html","text":"List of options Align Note: only few of \"align *\" options really work, all other are bugged_ align_keep_tabs : Whether to keep non-indenting tabs. align_right_cmt_at_col : Minimum column at which to align trailing comments. align_right_cmt_gap : Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned. align_right_cmt_span : The span for aligning comments that end lines. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_same_func_call_params_span : The span for aligning function-call parameters for single line functions. Spacing sp_angle_paren sp_angle_paren_empty sp_angle_shift sp_angle_word sp_assign : Add or remove space around assignment operator '=', '+=', etc. sp_after_assign : Add or remove space after assignment operator '=', '+=', etc. sp_balance_nested_parens : Whether to balance spaces inside nested parentheses. sp_before_assign : Add or remove space before assignment operator '=', '+=', etc. sp_before_sparen : Add or remove space before ( of control statements ( if , for , switch , while etc.). sp_before_tr_emb_cmt : Add or remove space before a trailing or embedded comment. sp_brace_catch : Add or remove space between '}' and 'catch' if on the same line. sp_brace_else : Add or remove space between } and else if on the same line sp_catch_brace : Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_catch_paren : Add or remove space between catch and ( in catch (something) { } . If set to ignore, sp_before_sparen is used. sp_cpp_lambda_assign sp_cpp_lambda_paren sp_else_brace sp_inside_angle sp_inside_fparens sp_not sp_num_before_tr_emb_cmt : Number of spaces before a trailing or embedded comment. sp_permit_cpp11_shift sp_try_brace : Add or remove space between try and { if on the same line. Indent align_left_shift : Whether to align lines that start with '<<' with previous '<<'. indent_access_spec : Same as indent_label , but for access specifiers that are followed by a colon. indent_access_spec_body : Whether to indent the code after an access specifier by one level. indent_align_assign : Whether to align continued statements at the '='. If false or if the '=' is followed by a newline, the next line is indent one tab. indent_align_string : Whether to indent strings broken by '\\' so that they line up. indent_brace_parent : Whether to indent based on the size of the brace parent. indent_braces : Whether braces are indented to the body level. indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true . indent_class : Whether the ' class ' body is indented. indent_class_colon : Whether to indent the stuff after a leading base class colon. indent_class_on_colon : Whether to indent based on a class colon instead of the stuff after the colon. indent_col1_comment : Whether to indent comments found in first column. indent_columns : The number of columns to indent per level. indent_continue : The continuation indent. If non-zero, this overrides the indent of '(', '[' and '=' continuation indents. indent_constr_colon : Whether to indent the stuff after a leading class initializer colon. indent_comma_paren : Whether to indent a comma when inside a parenthesis. If true, aligns under the open parenthesis. indent_ctor_init_leading : Virtual indent from the ':' for member initializers. indent_else_if : Whether to indent if following else as a new block under the else . indent_extern : Whether the extern \"C\" body is indented. indent_first_for_expr : Whether to align the first expression to following ones if indent_semicolon_for_paren =true. indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_func_def_param : Same as indent_func_call_param , but for function definitions. indent_func_param_double : Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param indent_func_proto_param : Same as indent_func_call_param , but for function prototypes. indent_namespace : Whether to indent the body of a 'namespace'. indent_param : The continuation indent for func_*_param if they are true. If non-zero, this overrides the indent. indent_paren_close : How to indent a close parenthesis after a newline. indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_relative_single_line_comments : Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. indent_semicolon_for_paren : Whether to indent a semicolon when inside a for parenthesis. indent_shift : Whether to indent continued shift expressions ('<<' and '>>') instead of aligning. indent_sing_line_comments : Spaces to indent single line ( // ) comments on lines before code. indent_square_nl : If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended). indent_template_param : Same as indent_func_def_param , but for template parameter lists. indent_with_tabs : How to use tabs when indenting code. indent_xml_string : The number of spaces to indent multi-line XML strings. Newline nl_after_func_body : The number of newlines after '}' of a multi-line function body. nl_after_func_body_one_liner : The number of newlines after '}' of a single line function body. nl_after_if : Add or remove blank line after 'if' statement. nl_after_switch : Add or remove blank line after switch statement. nl_brace_else nl_before_block_comment nl_before_if : Add or remove blank line before 'if'. nl_before_switch : Add or remove blank line before switch statement. nl_catch_brace nl_else_brace nl_elseif_brace nl_fdef_brace : Add or remove newline between function signature and { . nl_for_brace : Add or remove newline between 'for' and '{'. nl_if_brace nl_if_leave_one_liners nl_max nl_max_blank_in_func nl_multi_line_cond nl_switch_brace : Add or remove newline between 'switch' and '{'. Other cmt_width code_width disable_processing_cmt : Specify the marker used in comments to disable processing of part of the file enable_processing_cmt : Specify the marker used in comments to (re)enable processing in a file mod_full_brace_if mod_full_brace_for Bugged options Some options do not work (or are too sophisticated to understand how they work): * align_right_cmt_at_col * align_same_func_call_params_span * indent_align_assign * indent_braces_no_class * indent_ctor_init_leading * indent_first_for_expr * indent_relative_single_line_comments * indent_semicolon_for_paren * indent_template_param","title":"Options"},{"location":"options_list.html#list-of-options","text":"","title":"List of options"},{"location":"options_list.html#align","text":"Note: only few of \"align *\" options really work, all other are bugged_ align_keep_tabs : Whether to keep non-indenting tabs. align_right_cmt_at_col : Minimum column at which to align trailing comments. align_right_cmt_gap : Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned. align_right_cmt_span : The span for aligning comments that end lines. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_same_func_call_params_span : The span for aligning function-call parameters for single line functions.","title":"Align"},{"location":"options_list.html#spacing","text":"sp_angle_paren sp_angle_paren_empty sp_angle_shift sp_angle_word sp_assign : Add or remove space around assignment operator '=', '+=', etc. sp_after_assign : Add or remove space after assignment operator '=', '+=', etc. sp_balance_nested_parens : Whether to balance spaces inside nested parentheses. sp_before_assign : Add or remove space before assignment operator '=', '+=', etc. sp_before_sparen : Add or remove space before ( of control statements ( if , for , switch , while etc.). sp_before_tr_emb_cmt : Add or remove space before a trailing or embedded comment. sp_brace_catch : Add or remove space between '}' and 'catch' if on the same line. sp_brace_else : Add or remove space between } and else if on the same line sp_catch_brace : Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_catch_paren : Add or remove space between catch and ( in catch (something) { } . If set to ignore, sp_before_sparen is used. sp_cpp_lambda_assign sp_cpp_lambda_paren sp_else_brace sp_inside_angle sp_inside_fparens sp_not sp_num_before_tr_emb_cmt : Number of spaces before a trailing or embedded comment. sp_permit_cpp11_shift sp_try_brace : Add or remove space between try and { if on the same line.","title":"Spacing"},{"location":"options_list.html#indent","text":"align_left_shift : Whether to align lines that start with '<<' with previous '<<'. indent_access_spec : Same as indent_label , but for access specifiers that are followed by a colon. indent_access_spec_body : Whether to indent the code after an access specifier by one level. indent_align_assign : Whether to align continued statements at the '='. If false or if the '=' is followed by a newline, the next line is indent one tab. indent_align_string : Whether to indent strings broken by '\\' so that they line up. indent_brace_parent : Whether to indent based on the size of the brace parent. indent_braces : Whether braces are indented to the body level. indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true . indent_class : Whether the ' class ' body is indented. indent_class_colon : Whether to indent the stuff after a leading base class colon. indent_class_on_colon : Whether to indent based on a class colon instead of the stuff after the colon. indent_col1_comment : Whether to indent comments found in first column. indent_columns : The number of columns to indent per level. indent_continue : The continuation indent. If non-zero, this overrides the indent of '(', '[' and '=' continuation indents. indent_constr_colon : Whether to indent the stuff after a leading class initializer colon. indent_comma_paren : Whether to indent a comma when inside a parenthesis. If true, aligns under the open parenthesis. indent_ctor_init_leading : Virtual indent from the ':' for member initializers. indent_else_if : Whether to indent if following else as a new block under the else . indent_extern : Whether the extern \"C\" body is indented. indent_first_for_expr : Whether to align the first expression to following ones if indent_semicolon_for_paren =true. indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_func_def_param : Same as indent_func_call_param , but for function definitions. indent_func_param_double : Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param indent_func_proto_param : Same as indent_func_call_param , but for function prototypes. indent_namespace : Whether to indent the body of a 'namespace'. indent_param : The continuation indent for func_*_param if they are true. If non-zero, this overrides the indent. indent_paren_close : How to indent a close parenthesis after a newline. indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_relative_single_line_comments : Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. indent_semicolon_for_paren : Whether to indent a semicolon when inside a for parenthesis. indent_shift : Whether to indent continued shift expressions ('<<' and '>>') instead of aligning. indent_sing_line_comments : Spaces to indent single line ( // ) comments on lines before code. indent_square_nl : If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended). indent_template_param : Same as indent_func_def_param , but for template parameter lists. indent_with_tabs : How to use tabs when indenting code. indent_xml_string : The number of spaces to indent multi-line XML strings.","title":"Indent"},{"location":"options_list.html#newline","text":"nl_after_func_body : The number of newlines after '}' of a multi-line function body. nl_after_func_body_one_liner : The number of newlines after '}' of a single line function body. nl_after_if : Add or remove blank line after 'if' statement. nl_after_switch : Add or remove blank line after switch statement. nl_brace_else nl_before_block_comment nl_before_if : Add or remove blank line before 'if'. nl_before_switch : Add or remove blank line before switch statement. nl_catch_brace nl_else_brace nl_elseif_brace nl_fdef_brace : Add or remove newline between function signature and { . nl_for_brace : Add or remove newline between 'for' and '{'. nl_if_brace nl_if_leave_one_liners nl_max nl_max_blank_in_func nl_multi_line_cond nl_switch_brace : Add or remove newline between 'switch' and '{'.","title":"Newline"},{"location":"options_list.html#other","text":"cmt_width code_width disable_processing_cmt : Specify the marker used in comments to disable processing of part of the file enable_processing_cmt : Specify the marker used in comments to (re)enable processing in a file mod_full_brace_if mod_full_brace_for","title":"Other"},{"location":"options_list.html#bugged-options","text":"Some options do not work (or are too sophisticated to understand how they work): * align_right_cmt_at_col * align_same_func_call_params_span * indent_align_assign * indent_braces_no_class * indent_ctor_init_leading * indent_first_for_expr * indent_relative_single_line_comments * indent_semicolon_for_paren * indent_template_param","title":"Bugged options"},{"location":"align_options/align_keep_tabs.html","text":"align_keep_tabs Whether to keep non-indenting tabs. Possible values are true and false , default false . Examples Base example: int main() { int x = 25; std::cout << \"X is: \" << x << '\\n'; std::cout << \"X2 is: \" << x+2 << '\\n'; return 0; } Here there are some tabs in std::cout lines to align << . true Changes were not applied to base example false Code after: int main() { int x = 25; std::cout << \"X is: \" << x << '\\n'; std::cout << \"X2 is: \" << x+2 << '\\n'; return 0; } Looks like base example, but tabs in std::cout lines were replaced with spaces. See also indent_with_tabs : How to use tabs when indenting code. sp_balance_nested_parens : Whether to balance spaces inside nested parentheses.","title":"align_keep_tabs"},{"location":"align_options/align_keep_tabs.html#align_keep_tabs","text":"Whether to keep non-indenting tabs. Possible values are true and false , default false .","title":"align_keep_tabs"},{"location":"align_options/align_keep_tabs.html#examples","text":"Base example: int main() { int x = 25; std::cout << \"X is: \" << x << '\\n'; std::cout << \"X2 is: \" << x+2 << '\\n'; return 0; } Here there are some tabs in std::cout lines to align << .","title":"Examples"},{"location":"align_options/align_keep_tabs.html#true","text":"Changes were not applied to base example","title":"true"},{"location":"align_options/align_keep_tabs.html#false","text":"Code after: int main() { int x = 25; std::cout << \"X is: \" << x << '\\n'; std::cout << \"X2 is: \" << x+2 << '\\n'; return 0; } Looks like base example, but tabs in std::cout lines were replaced with spaces.","title":"false"},{"location":"align_options/align_keep_tabs.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. sp_balance_nested_parens : Whether to balance spaces inside nested parentheses.","title":"See also"},{"location":"align_options/align_right_cmt_at_col.html","text":"align_right_cmt_at_col Minimum column at which to align trailing comments. Comments which are aligned beyond this column, but which can be aligned in a lesser column, may be \"pulled in\". 0 = Ignore (default). Does not work with Uncrustify_d-0.70.1_f See stackoverflow . See also indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"align_right_cmt_at_col"},{"location":"align_options/align_right_cmt_at_col.html#align_right_cmt_at_col","text":"Minimum column at which to align trailing comments. Comments which are aligned beyond this column, but which can be aligned in a lesser column, may be \"pulled in\". 0 = Ignore (default). Does not work with Uncrustify_d-0.70.1_f See stackoverflow .","title":"align_right_cmt_at_col"},{"location":"align_options/align_right_cmt_at_col.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"See also"},{"location":"align_options/align_right_cmt_gap.html","text":"align_right_cmt_gap Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned. Must be non-zero to have an effect. Does not work with Uncrustify_d-0.70.1_f See stackoverflow . See also indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"align_right_cmt_gap"},{"location":"align_options/align_right_cmt_gap.html#align_right_cmt_gap","text":"Minimum number of columns between preceding text and a trailing comment in order for the comment to qualify for being aligned. Must be non-zero to have an effect. Does not work with Uncrustify_d-0.70.1_f See stackoverflow .","title":"align_right_cmt_gap"},{"location":"align_options/align_right_cmt_gap.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"See also"},{"location":"align_options/align_right_cmt_span.html","text":"align_right_cmt_span The span for aligning comments that end lines. 0 = Don't align (default). Does not work with Uncrustify_d-0.70.1_f See stackoverflow . See also indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"align_right_cmt_span"},{"location":"align_options/align_right_cmt_span.html#align_right_cmt_span","text":"The span for aligning comments that end lines. 0 = Don't align (default). Does not work with Uncrustify_d-0.70.1_f See stackoverflow .","title":"align_right_cmt_span"},{"location":"align_options/align_right_cmt_span.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"See also"},{"location":"align_options/align_same_func_call_params.html","text":"align_same_func_call_params Whether to align parameters in single-line functions that have the same name. The function names must already be aligned with each other. Possible values are true and false , default false . Examples Base example: int main() { int aa, x = 10; int y = 20; booFunct(100, y, 5); booFunct(x, 100, y); return 0; } true Code after: int main() { int aa, x = 10; int y = 20; booFunct(100, y, 5); booFunct( x, 100, y); return 0; } false Changes were not applied to base example See also indent_with_tabs : How to use tabs when indenting code. sp_balance_nested_parens : Whether to balance spaces inside nested parentheses. align_keep_tabs : Whether to keep non-indenting tabs.","title":"align_same_func_call_params"},{"location":"align_options/align_same_func_call_params.html#align_same_func_call_params","text":"Whether to align parameters in single-line functions that have the same name. The function names must already be aligned with each other. Possible values are true and false , default false .","title":"align_same_func_call_params"},{"location":"align_options/align_same_func_call_params.html#examples","text":"Base example: int main() { int aa, x = 10; int y = 20; booFunct(100, y, 5); booFunct(x, 100, y); return 0; }","title":"Examples"},{"location":"align_options/align_same_func_call_params.html#true","text":"Code after: int main() { int aa, x = 10; int y = 20; booFunct(100, y, 5); booFunct( x, 100, y); return 0; }","title":"true"},{"location":"align_options/align_same_func_call_params.html#false","text":"Changes were not applied to base example","title":"false"},{"location":"align_options/align_same_func_call_params.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. sp_balance_nested_parens : Whether to balance spaces inside nested parentheses. align_keep_tabs : Whether to keep non-indenting tabs.","title":"See also"},{"location":"align_options/align_same_func_call_params_span.html","text":"align_same_func_call_params_span The span for aligning function-call parameters for single line functions. 0 = Don't align (default). Does not work with Uncrustify_d-0.70.1_f See also indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"align_same_func_call_params_span"},{"location":"align_options/align_same_func_call_params_span.html#align_same_func_call_params_span","text":"The span for aligning function-call parameters for single line functions. 0 = Don't align (default). Does not work with Uncrustify_d-0.70.1_f","title":"align_same_func_call_params_span"},{"location":"align_options/align_same_func_call_params_span.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. align_same_func_call_params : Whether to align parameters in single-line functions that have the same name. align_keep_tabs : Whether to keep non-indenting tabs.","title":"See also"},{"location":"indent_options/align_left_shift.html","text":"align_left_shift Whether to align lines that start with '<<' with previous '<<'. Possible values are true or false , default true . Examples true Code before: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; return 0; } Code after: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; return 0; } false With example above false setting does not apply changes and \"after\" is the same as \"before\". See also indent_class : Whether the ' class ' body is indented. indent_shift : Whether to indent continued shift expressions ('<<' and '>>') instead of aligning.","title":"align_left_shift"},{"location":"indent_options/align_left_shift.html#align_left_shift","text":"Whether to align lines that start with '<<' with previous '<<'. Possible values are true or false , default true .","title":"align_left_shift"},{"location":"indent_options/align_left_shift.html#examples","text":"","title":"Examples"},{"location":"indent_options/align_left_shift.html#true","text":"Code before: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; return 0; } Code after: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; return 0; }","title":"true"},{"location":"indent_options/align_left_shift.html#false","text":"With example above false setting does not apply changes and \"after\" is the same as \"before\".","title":"false"},{"location":"indent_options/align_left_shift.html#see-also","text":"indent_class : Whether the ' class ' body is indented. indent_shift : Whether to indent continued shift expressions ('<<' and '>>') instead of aligning.","title":"See also"},{"location":"indent_options/indent_access_spec.html","text":"indent_access_spec Same as indent_label , but for access specifiers that are followed by a colon. Possible values are integer: >0 : Absolute column where 1 is the leftmost column <=0 : Subtract from brace indent Examples Config: indent_access_spec = 2 Code before: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; Code after: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; Barrel::Barrel() { width =5; } See also indent_access_spec_body : Whether to indent the code after an access specifier by one level. indent_columns : The number of columns to indent per level. indent_with_tabs : How to use tabs when indenting code.","title":"indent_access_spec"},{"location":"indent_options/indent_access_spec.html#indent_access_spec","text":"Same as indent_label , but for access specifiers that are followed by a colon. Possible values are integer: >0 : Absolute column where 1 is the leftmost column <=0 : Subtract from brace indent","title":"indent_access_spec"},{"location":"indent_options/indent_access_spec.html#examples","text":"Config: indent_access_spec = 2 Code before: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; Code after: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; Barrel::Barrel() { width =5; }","title":"Examples"},{"location":"indent_options/indent_access_spec.html#see-also","text":"indent_access_spec_body : Whether to indent the code after an access specifier by one level. indent_columns : The number of columns to indent per level. indent_with_tabs : How to use tabs when indenting code.","title":"See also"},{"location":"indent_options/indent_access_spec_body.html","text":"indent_access_spec_body Whether to indent the code after an access specifier by one level. If true , this option forces ' indent_access_spec =0'. Possible values are true and false , default false . Examples true Code before: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; Code after: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; See also indent_access_spec : Same as indent_label , but for access specifiers that are followed by a colon. indent_columns : The number of columns to indent per level. indent_with_tabs : How to use tabs when indenting code.","title":"indent_access_spec_body"},{"location":"indent_options/indent_access_spec_body.html#indent_access_spec_body","text":"Whether to indent the code after an access specifier by one level. If true , this option forces ' indent_access_spec =0'. Possible values are true and false , default false .","title":"indent_access_spec_body"},{"location":"indent_options/indent_access_spec_body.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_access_spec_body.html#true","text":"Code before: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; }; Code after: class Barrel { int width; public: Barrel(); virtual ~Barrel(); int getWidth() const; };","title":"true"},{"location":"indent_options/indent_access_spec_body.html#see-also","text":"indent_access_spec : Same as indent_label , but for access specifiers that are followed by a colon. indent_columns : The number of columns to indent per level. indent_with_tabs : How to use tabs when indenting code.","title":"See also"},{"location":"indent_options/indent_align_assign.html","text":"indent_align_assign Whether to align continued statements at the '='. If false or if the '=' is followed by a newline, the next line is indent one tab. Possible values are true and false , default true . Does not work with Uncrustify_d-0.70.1_f See also indent_paren_close : How to indent a close parenthesis after a newline. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"indent_align_assign"},{"location":"indent_options/indent_align_assign.html#indent_align_assign","text":"Whether to align continued statements at the '='. If false or if the '=' is followed by a newline, the next line is indent one tab. Possible values are true and false , default true . Does not work with Uncrustify_d-0.70.1_f","title":"indent_align_assign"},{"location":"indent_options/indent_align_assign.html#see-also","text":"indent_paren_close : How to indent a close parenthesis after a newline. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"See also"},{"location":"indent_options/indent_align_string.html","text":"indent_align_string Whether to indent strings broken by '\\' so that they line up. Possible values are true or false , default false . It seems that description of this option is not correct, example below works in some other way. Examples true Config: indent_align_string = true Before: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } After: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } false Config: indent_align_string = false Before: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } After: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } Note the only version from \"true\" version is that in second assignment lines are aligned at level of brace and not the level of function parameter. See also indent_xml_string - The number of spaces to indent multi-line XML strings. Requires indent_align_string=true . Bug #248 - indent_align_string and streams #248 (closed) Issue #749 - indent_with_tabs: allow alignment with either spaces or tabs Test code and expected result","title":"indent_align_string"},{"location":"indent_options/indent_align_string.html#indent_align_string","text":"Whether to indent strings broken by '\\' so that they line up. Possible values are true or false , default false . It seems that description of this option is not correct, example below works in some other way.","title":"indent_align_string"},{"location":"indent_options/indent_align_string.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_align_string.html#true","text":"Config: indent_align_string = true Before: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } After: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } }","title":"true"},{"location":"indent_options/indent_align_string.html#false","text":"Config: indent_align_string = false Before: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } After: int main() { if (x<50) { s = std::string(\"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); s = ssff(20, \"Lorem ipsum dolor sit amet,\" \"consectetur adipiscing elit.\" \"Cras fermentum id diam sit amet consequat.\"); } } Note the only version from \"true\" version is that in second assignment lines are aligned at level of brace and not the level of function parameter.","title":"false"},{"location":"indent_options/indent_align_string.html#see-also","text":"indent_xml_string - The number of spaces to indent multi-line XML strings. Requires indent_align_string=true . Bug #248 - indent_align_string and streams #248 (closed) Issue #749 - indent_with_tabs: allow alignment with either spaces or tabs Test code and expected result","title":"See also"},{"location":"indent_options/indent_brace_parent.html","text":"indent_brace_parent Whether to indent based on the size of the brace parent, i.e. if => 3 spaces, for => 4 spaces, etc. Possible values are true and false , default false . Examples true Before: int main() { int x = 10; int y = 20; x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } false Code in above example will not be changed for false . See also nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level.","title":"indent_brace_parent"},{"location":"indent_options/indent_brace_parent.html#indent_brace_parent","text":"Whether to indent based on the size of the brace parent, i.e. if => 3 spaces, for => 4 spaces, etc. Possible values are true and false , default false .","title":"indent_brace_parent"},{"location":"indent_options/indent_brace_parent.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_brace_parent.html#true","text":"Before: int main() { int x = 10; int y = 20; x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; }","title":"true"},{"location":"indent_options/indent_brace_parent.html#false","text":"Code in above example will not be changed for false .","title":"false"},{"location":"indent_options/indent_brace_parent.html#see-also","text":"nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level.","title":"See also"},{"location":"indent_options/indent_braces.html","text":"indent_braces Whether braces are indented to the body level. Possible values are true and false , default false . Examples true Before: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } See also nl_else_brace - similar option but for else without if nl_if_brace - similar option but for if nl_before_switch - Add or remove blank line before 'switch'. indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"indent_braces"},{"location":"indent_options/indent_braces.html#indent_braces","text":"Whether braces are indented to the body level. Possible values are true and false , default false .","title":"indent_braces"},{"location":"indent_options/indent_braces.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_braces.html#true","text":"Before: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; }","title":"true"},{"location":"indent_options/indent_braces.html#see-also","text":"nl_else_brace - similar option but for else without if nl_if_brace - similar option but for if nl_before_switch - Add or remove blank line before 'switch'. indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"See also"},{"location":"indent_options/indent_braces_no_class.html","text":"indent_braces_no_class Whether to disable indenting class braces if indent_braces=true . Possible values are true and false , default false . Works only if indent_braces is true . Does not work with Uncrustify_d-0.70.1_f See also nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"indent_braces_no_class"},{"location":"indent_options/indent_braces_no_class.html#indent_braces_no_class","text":"Whether to disable indenting class braces if indent_braces=true . Possible values are true and false , default false . Works only if indent_braces is true . Does not work with Uncrustify_d-0.70.1_f","title":"indent_braces_no_class"},{"location":"indent_options/indent_braces_no_class.html#see-also","text":"nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"See also"},{"location":"indent_options/indent_braces_no_func.html","text":"indent_braces_no_func Whether to disable indenting function braces if indent_braces=true . Possible values are true and false , default false . Works only if indent_braces is true . Examples Config: indent_braces = true indent_braces_no_func = true true Before: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } Note the \"main\" braces were not indented. See also nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"indent_braces_no_func"},{"location":"indent_options/indent_braces_no_func.html#indent_braces_no_func","text":"Whether to disable indenting function braces if indent_braces=true . Possible values are true and false , default false . Works only if indent_braces is true .","title":"indent_braces_no_func"},{"location":"indent_options/indent_braces_no_func.html#examples","text":"Config: indent_braces = true indent_braces_no_func = true","title":"Examples"},{"location":"indent_options/indent_braces_no_func.html#true","text":"Before: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } return 0; } Note the \"main\" braces were not indented.","title":"true"},{"location":"indent_options/indent_braces_no_func.html#see-also","text":"nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"See also"},{"location":"indent_options/indent_braces_no_struct.html","text":"indent_braces_no_struct Whether to disable indenting struct braces if indent_braces=true. Possible values are true and false , default false . Works only if indent_braces is true . Examples Config: indent_braces = true #indent_braces_no_struct = false # this is default Before: struct Barrel { int width; int height; int radius; }; int boo() { Barrel b; b.width = 15; std::cout << \"Width is \" << b.width << '\\n'; return 0; } code after: struct Barrel { int width; int height; int radius; }; int boo() { Barrel b; b.width = 15; std::cout << \"Width is \" << b.width << '\\n'; return 0; } See also nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true .","title":"indent_braces_no_struct"},{"location":"indent_options/indent_braces_no_struct.html#indent_braces_no_struct","text":"Whether to disable indenting struct braces if indent_braces=true. Possible values are true and false , default false . Works only if indent_braces is true .","title":"indent_braces_no_struct"},{"location":"indent_options/indent_braces_no_struct.html#examples","text":"Config: indent_braces = true #indent_braces_no_struct = false # this is default Before: struct Barrel { int width; int height; int radius; }; int boo() { Barrel b; b.width = 15; std::cout << \"Width is \" << b.width << '\\n'; return 0; } code after: struct Barrel { int width; int height; int radius; }; int boo() { Barrel b; b.width = 15; std::cout << \"Width is \" << b.width << '\\n'; return 0; }","title":"Examples"},{"location":"indent_options/indent_braces_no_struct.html#see-also","text":"nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_class : Whether to disable indenting class braces if indent_braces=true . indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true .","title":"See also"},{"location":"indent_options/indent_class.html","text":"indent_class Whether the ' class ' body is indented. Possible values are true or false , default false . By default class members are not indented. Examples true Code before: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; See also indent_columns - The number of columns to indent per level. indent_with_tabs - How to use tabs when indenting code.","title":"indent_class"},{"location":"indent_options/indent_class.html#indent_class","text":"Whether the ' class ' body is indented. Possible values are true or false , default false . By default class members are not indented.","title":"indent_class"},{"location":"indent_options/indent_class.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_class.html#true","text":"Code before: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; };","title":"true"},{"location":"indent_options/indent_class.html#see-also","text":"indent_columns - The number of columns to indent per level. indent_with_tabs - How to use tabs when indenting code.","title":"See also"},{"location":"indent_options/indent_class_colon.html","text":"indent_class_colon Whether to indent the stuff after a leading base class colon. Possible values are true or false , default false . It seems it only affects class declaration and nothing more. Examples true Code before: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Note here the word \"Round\" is aligned. See also indent_class : Whether the ' class ' body is indented. indent_constr_colon : Whether to indent the stuff after a leading class initializer colon.","title":"indent_class_colon"},{"location":"indent_options/indent_class_colon.html#indent_class_colon","text":"Whether to indent the stuff after a leading base class colon. Possible values are true or false , default false . It seems it only affects class declaration and nothing more.","title":"indent_class_colon"},{"location":"indent_options/indent_class_colon.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_class_colon.html#true","text":"Code before: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Note here the word \"Round\" is aligned.","title":"true"},{"location":"indent_options/indent_class_colon.html#see-also","text":"indent_class : Whether the ' class ' body is indented. indent_constr_colon : Whether to indent the stuff after a leading class initializer colon.","title":"See also"},{"location":"indent_options/indent_class_on_colon.html","text":"indent_class_on_colon Whether to indent based on a class colon instead of the stuff after the colon. Requires indent_class_colon=true . Possible values are true or false , default false . There is almost no difference from indent_constr_colon . Examples Both \"true\" and \"false\" examples change line with \"Round\", but there is a small difference. true Config is indent_class_colon = true indent_class_on_colon = true Code before: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; false Code before: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; See also indent_class : Whether the ' class ' body is indented. indent_class_colon : Whether to indent the stuff after a leading base class colon. indent_constr_colon : Whether to indent the stuff after a leading class initializer colon.","title":"indent_class_on_colon"},{"location":"indent_options/indent_class_on_colon.html#indent_class_on_colon","text":"Whether to indent based on a class colon instead of the stuff after the colon. Requires indent_class_colon=true . Possible values are true or false , default false . There is almost no difference from indent_constr_colon .","title":"indent_class_on_colon"},{"location":"indent_options/indent_class_on_colon.html#examples","text":"Both \"true\" and \"false\" examples change line with \"Round\", but there is a small difference.","title":"Examples"},{"location":"indent_options/indent_class_on_colon.html#true","text":"Config is indent_class_colon = true indent_class_on_colon = true Code before: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; };","title":"true"},{"location":"indent_options/indent_class_on_colon.html#false","text":"Code before: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; }; Code after: class Barrel : Wooden, Round { public: Barrel(); virtual ~Barrel(); int getWidth() const; protected: int width; };","title":"false"},{"location":"indent_options/indent_class_on_colon.html#see-also","text":"indent_class : Whether the ' class ' body is indented. indent_class_colon : Whether to indent the stuff after a leading base class colon. indent_constr_colon : Whether to indent the stuff after a leading class initializer colon.","title":"See also"},{"location":"indent_options/indent_col1_comment.html","text":"indent_col1_comment Whether to indent comments found in first column. Possible values are true or false , default false . Examples true Before: // main comment int glz = 2; int main() { int x = 10; int y = 20; // Comment line one x = y + 21; return x; } After: // main comment int glz = 2; int main() { int x = 10; int y = 20; // Comment line one x = y + 21; return x; } false Before: // main comment int glz = 2; int main() { int x = 10; int y = 20; // Comment line one x = y + 21; return x; } After: (no changes applied) See also indent_with_tabs - How to use tabs when indenting code. input_tab_size - The original size of tabs in the input. output_tab_size - The size of tabs in the output (only used if align_with_tabs =true). indent_namespace_level - The number of spaces to indent a namespace block.","title":"indent_col1_comment"},{"location":"indent_options/indent_col1_comment.html#indent_col1_comment","text":"Whether to indent comments found in first column. Possible values are true or false , default false .","title":"indent_col1_comment"},{"location":"indent_options/indent_col1_comment.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_col1_comment.html#true","text":"Before: // main comment int glz = 2; int main() { int x = 10; int y = 20; // Comment line one x = y + 21; return x; } After: // main comment int glz = 2; int main() { int x = 10; int y = 20; // Comment line one x = y + 21; return x; }","title":"true"},{"location":"indent_options/indent_col1_comment.html#false","text":"Before: // main comment int glz = 2; int main() { int x = 10; int y = 20; // Comment line one x = y + 21; return x; } After: (no changes applied)","title":"false"},{"location":"indent_options/indent_col1_comment.html#see-also","text":"indent_with_tabs - How to use tabs when indenting code. input_tab_size - The original size of tabs in the input. output_tab_size - The size of tabs in the output (only used if align_with_tabs =true). indent_namespace_level - The number of spaces to indent a namespace block.","title":"See also"},{"location":"indent_options/indent_columns.html","text":"indent_columns The number of columns to indent per level. Usually 2, 3, 4, or 8. Default is 8. Examples Config: indent_with_tabs = 1 indent_columns = 2 Before: int main() { int x = 10; int sum = 0; for (int i=0; i<x; i++) { sum = sum+i; } std::cout << \"sum is\" << sum << '\\n'; } After: int main() { int x = 10; int sum = 0; for (int i=0; i<x; i++) { sum = sum+i; } std::cout << \"sum is\" << sum << '\\n'; } Code on html page may look the same, but it replaced each tab with two spaces (as Google guide recommends). See also indent_with_tabs - How to use tabs when indenting code. input_tab_size - The original size of tabs in the input. output_tab_size - The size of tabs in the output (only used if align_with_tabs =true). indent_namespace_level - The number of spaces to indent a namespace block.","title":"indent_columns"},{"location":"indent_options/indent_columns.html#indent_columns","text":"The number of columns to indent per level. Usually 2, 3, 4, or 8. Default is 8.","title":"indent_columns"},{"location":"indent_options/indent_columns.html#examples","text":"Config: indent_with_tabs = 1 indent_columns = 2 Before: int main() { int x = 10; int sum = 0; for (int i=0; i<x; i++) { sum = sum+i; } std::cout << \"sum is\" << sum << '\\n'; } After: int main() { int x = 10; int sum = 0; for (int i=0; i<x; i++) { sum = sum+i; } std::cout << \"sum is\" << sum << '\\n'; } Code on html page may look the same, but it replaced each tab with two spaces (as Google guide recommends).","title":"Examples"},{"location":"indent_options/indent_columns.html#see-also","text":"indent_with_tabs - How to use tabs when indenting code. input_tab_size - The original size of tabs in the input. output_tab_size - The size of tabs in the output (only used if align_with_tabs =true). indent_namespace_level - The number of spaces to indent a namespace block.","title":"See also"},{"location":"indent_options/indent_comma_paren.html","text":"indent_comma_paren Whether to indent a comma when inside a parenthesis. If true, aligns under the open parenthesis. Possible values are true and false , default false . Examples Base example: int main() { int x = 10; int y = 20; many_param_func(x ,y ,33 ,44 ); return 0; } It's hard to spot difference, but there is one space in below results. true After: int main() { int x = 10; int y = 20; many_param_func(x ,y ,33 ,44 ); return 0; } false After: int main() { int x = 10; int y = 20; many_param_func(x ,y ,33 ,44 ); return 0; } See also indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"indent_comma_paren"},{"location":"indent_options/indent_comma_paren.html#indent_comma_paren","text":"Whether to indent a comma when inside a parenthesis. If true, aligns under the open parenthesis. Possible values are true and false , default false .","title":"indent_comma_paren"},{"location":"indent_options/indent_comma_paren.html#examples","text":"Base example: int main() { int x = 10; int y = 20; many_param_func(x ,y ,33 ,44 ); return 0; } It's hard to spot difference, but there is one space in below results.","title":"Examples"},{"location":"indent_options/indent_comma_paren.html#true","text":"After: int main() { int x = 10; int y = 20; many_param_func(x ,y ,33 ,44 ); return 0; }","title":"true"},{"location":"indent_options/indent_comma_paren.html#false","text":"After: int main() { int x = 10; int y = 20; many_param_func(x ,y ,33 ,44 ); return 0; }","title":"false"},{"location":"indent_options/indent_comma_paren.html#see-also","text":"indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"See also"},{"location":"indent_options/indent_constr_colon.html","text":"indent_constr_colon Whether to indent the stuff after a leading class initializer colon. Possible values are true or false , default false . Examples true Code before: Barrel::Barrel() : pos(nullptr), visible(false) { width =5; } Code after (may appear incorrect because tab/spaces in html): Barrel::Barrel() : pos(nullptr), visible(false) { width =5; } Note, this option works only if first initializer appears on the same line as constructor (after colon). Following code will not be changed: Barrel::Barrel() : pos(nullptr), visible(false) { width =5; } See also indent_columns - The number of columns to indent per level. indent_class : Whether the 'class' body is indented. indent_with_tabs - How to use tabs when indenting code.","title":"indent_constr_colon"},{"location":"indent_options/indent_constr_colon.html#indent_constr_colon","text":"Whether to indent the stuff after a leading class initializer colon. Possible values are true or false , default false .","title":"indent_constr_colon"},{"location":"indent_options/indent_constr_colon.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_constr_colon.html#true","text":"Code before: Barrel::Barrel() : pos(nullptr), visible(false) { width =5; } Code after (may appear incorrect because tab/spaces in html): Barrel::Barrel() : pos(nullptr), visible(false) { width =5; } Note, this option works only if first initializer appears on the same line as constructor (after colon). Following code will not be changed: Barrel::Barrel() : pos(nullptr), visible(false) { width =5; }","title":"true"},{"location":"indent_options/indent_constr_colon.html#see-also","text":"indent_columns - The number of columns to indent per level. indent_class : Whether the 'class' body is indented. indent_with_tabs - How to use tabs when indenting code.","title":"See also"},{"location":"indent_options/indent_continue.html","text":"indent_continue The continuation indent. If non-zero, this overrides the indent of '(', '[' and '=' continuation indents. Negative values are OK; negative value is absolute and not increased for each '(' or '[' level. For FreeBSD, this is set to 4. Default 0. Examples zero (disabled) Config (use spaces, 2 per line, indent_continue disabled): indent_columns = 2 indent_with_tabs = 0 indent_continue = 0 Code before: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Note second part of broken line appears on same level as = , [ or ( . some value Config (use spaces to indent, 2 per line, indent_continue set to 3): indent_columns = 2 indent_with_tabs = 0 indent_continue = 3 Code before: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Now second part of broken line starts at level \"three spaces since current indent level\". See also indent_columns - The number of columns to indent per level. indent_with_tabs - How to use tabs when indenting code.","title":"indent_continue"},{"location":"indent_options/indent_continue.html#indent_continue","text":"The continuation indent. If non-zero, this overrides the indent of '(', '[' and '=' continuation indents. Negative values are OK; negative value is absolute and not increased for each '(' or '[' level. For FreeBSD, this is set to 4. Default 0.","title":"indent_continue"},{"location":"indent_options/indent_continue.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_continue.html#zero-disabled","text":"Config (use spaces, 2 per line, indent_continue disabled): indent_columns = 2 indent_with_tabs = 0 indent_continue = 0 Code before: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Note second part of broken line appears on same level as = , [ or ( .","title":"zero (disabled)"},{"location":"indent_options/indent_continue.html#some-value","text":"Config (use spaces to indent, 2 per line, indent_continue set to 3): indent_columns = 2 indent_with_tabs = 0 indent_continue = 3 Code before: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x = 10 + 5 + 5 + 3; int arr[10]; arr[1 + x - sum] = 20; for (int i=0; i<x; i++) { sum = sum+i; } Now second part of broken line starts at level \"three spaces since current indent level\".","title":"some value"},{"location":"indent_options/indent_continue.html#see-also","text":"indent_columns - The number of columns to indent per level. indent_with_tabs - How to use tabs when indenting code.","title":"See also"},{"location":"indent_options/indent_ctor_init_leading.html","text":"indent_ctor_init_leading Virtual indent from the ':' for member initializers. Unsigned number, default 2 Does not work with Uncrustify_d-0.70.1_f See bugtracker and so . Examples none See also indent_columns - The number of columns to indent per level. indent_class : Whether the 'class' body is indented. indent_with_tabs - How to use tabs when indenting code.","title":"indent_ctor_init_leading"},{"location":"indent_options/indent_ctor_init_leading.html#indent_ctor_init_leading","text":"Virtual indent from the ':' for member initializers. Unsigned number, default 2 Does not work with Uncrustify_d-0.70.1_f See bugtracker and so .","title":"indent_ctor_init_leading"},{"location":"indent_options/indent_ctor_init_leading.html#examples","text":"none","title":"Examples"},{"location":"indent_options/indent_ctor_init_leading.html#see-also","text":"indent_columns - The number of columns to indent per level. indent_class : Whether the 'class' body is indented. indent_with_tabs - How to use tabs when indenting code.","title":"See also"},{"location":"indent_options/indent_else_if.html","text":"indent_else_if Whether to indent if following else as a new block under the else . If false, else\\nif is treated as else if for indenting purposes. Possible values are true and false , default false . Examples true Before: if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } code after: if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } false Code in above example will not be changed for false . See also nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level.","title":"indent_else_if"},{"location":"indent_options/indent_else_if.html#indent_else_if","text":"Whether to indent if following else as a new block under the else . If false, else\\nif is treated as else if for indenting purposes. Possible values are true and false , default false .","title":"indent_else_if"},{"location":"indent_options/indent_else_if.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_else_if.html#true","text":"Before: if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } code after: if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; }","title":"true"},{"location":"indent_options/indent_else_if.html#false","text":"Code in above example will not be changed for false .","title":"false"},{"location":"indent_options/indent_else_if.html#see-also","text":"nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level.","title":"See also"},{"location":"indent_options/indent_extern.html","text":"indent_extern Whether the extern \"C\" body is indented. Possible values are true and false , default false . It seems it removes any indentation if set to false . Examples true Before: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } code after: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } Here the function declaration was indented (maybe later this formatting was broken during html generation). false Before: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } code after: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } See also indent_namespace : Whether to indent the body of a 'namespace'. indent_braces : Whether braces are indented to the body level.","title":"indent_extern"},{"location":"indent_options/indent_extern.html#indent_extern","text":"Whether the extern \"C\" body is indented. Possible values are true and false , default false . It seems it removes any indentation if set to false .","title":"indent_extern"},{"location":"indent_options/indent_extern.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_extern.html#true","text":"Before: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } code after: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } Here the function declaration was indented (maybe later this formatting was broken during html generation).","title":"true"},{"location":"indent_options/indent_extern.html#false","text":"Before: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; } code after: extern \"C\" { int value(const char *pathname, int flags); // C function declaration } int main() { std::cout << value() << '\\n'; return 0; }","title":"false"},{"location":"indent_options/indent_extern.html#see-also","text":"indent_namespace : Whether to indent the body of a 'namespace'. indent_braces : Whether braces are indented to the body level.","title":"See also"},{"location":"indent_options/indent_first_for_expr.html","text":"indent_first_for_expr Whether to align the first expression to following ones if indent_semicolon_for_paren =true. Does not work with Uncrustify_d-0.70.1_f See also: indent_semicolon_for_paren - Whether to indent a semicolon when inside a for parenthesis. (Also does not work)","title":"indent_first_for_expr"},{"location":"indent_options/indent_first_for_expr.html#indent_first_for_expr","text":"Whether to align the first expression to following ones if indent_semicolon_for_paren =true. Does not work with Uncrustify_d-0.70.1_f See also: indent_semicolon_for_paren - Whether to indent a semicolon when inside a for parenthesis. (Also does not work)","title":"indent_first_for_expr"},{"location":"indent_options/indent_func_call_param.html","text":"indent_func_call_param Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. Possible values are true and false , default false . Examples true Before: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; } code after: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; } false Before: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; } code after: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; } See also indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"indent_func_call_param"},{"location":"indent_options/indent_func_call_param.html#indent_func_call_param","text":"Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. Possible values are true and false , default false .","title":"indent_func_call_param"},{"location":"indent_options/indent_func_call_param.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_func_call_param.html#true","text":"Before: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; } code after: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; }","title":"true"},{"location":"indent_options/indent_func_call_param.html#false","text":"Before: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; } code after: int main() { int x = 10; int y = 20; booFunct(x, y); return 0; }","title":"false"},{"location":"indent_options/indent_func_call_param.html#see-also","text":"indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"See also"},{"location":"indent_options/indent_func_class_param.html","text":"indent_func_class_param Same as indent_func_call_param , but for class declarations. Possible values are true and false , default false . Examples true Before: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth(int x, int y) const; protected: int width; }; int Barrel::getWidth(int x, int y) const { return width; } code after: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth(int x, int y) const; protected: int width; }; int Barrel::getWidth(int x, int y) const { return width; } false Before: ... int getWidth(int x, int y) const; ... int Barrel::getWidth(int x, int y) const { return width; } code after: ... int getWidth(int x, int y) const; ... int Barrel::getWidth(int x, int y) const { return width; } See also indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"indent_func_class_param"},{"location":"indent_options/indent_func_class_param.html#indent_func_class_param","text":"Same as indent_func_call_param , but for class declarations. Possible values are true and false , default false .","title":"indent_func_class_param"},{"location":"indent_options/indent_func_class_param.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_func_class_param.html#true","text":"Before: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth(int x, int y) const; protected: int width; }; int Barrel::getWidth(int x, int y) const { return width; } code after: class Barrel { public: Barrel(); virtual ~Barrel(); int getWidth(int x, int y) const; protected: int width; }; int Barrel::getWidth(int x, int y) const { return width; }","title":"true"},{"location":"indent_options/indent_func_class_param.html#false","text":"Before: ... int getWidth(int x, int y) const; ... int Barrel::getWidth(int x, int y) const { return width; } code after: ... int getWidth(int x, int y) const; ... int Barrel::getWidth(int x, int y) const { return width; }","title":"false"},{"location":"indent_options/indent_func_class_param.html#see-also","text":"indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"See also"},{"location":"indent_options/indent_func_ctor_var_param.html","text":"indent_func_ctor_var_param Same as indent_func_call_param , but for class variable constructors. Possible values are true and false , default false . Examples true Before: class Barrel { Barrel(int x, int y); ... }; Barrel::Barrel(int x, int y) { width =5; } code after: class Barrel { Barrel(int x, int y); ... }; Barrel::Barrel(int x, int y) { width =5; } false Before: class Barrel { Barrel(int x, int y); ... }; Barrel::Barrel(int x, int y) { width =5; } code after: class Barrel { Barrel(int x, int y); }; Barrel::Barrel(int x, int y) { width =5; } See also indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"indent_func_ctor_var_param"},{"location":"indent_options/indent_func_ctor_var_param.html#indent_func_ctor_var_param","text":"Same as indent_func_call_param , but for class variable constructors. Possible values are true and false , default false .","title":"indent_func_ctor_var_param"},{"location":"indent_options/indent_func_ctor_var_param.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_func_ctor_var_param.html#true","text":"Before: class Barrel { Barrel(int x, int y); ... }; Barrel::Barrel(int x, int y) { width =5; } code after: class Barrel { Barrel(int x, int y); ... }; Barrel::Barrel(int x, int y) { width =5; }","title":"true"},{"location":"indent_options/indent_func_ctor_var_param.html#false","text":"Before: class Barrel { Barrel(int x, int y); ... }; Barrel::Barrel(int x, int y) { width =5; } code after: class Barrel { Barrel(int x, int y); }; Barrel::Barrel(int x, int y) { width =5; }","title":"false"},{"location":"indent_options/indent_func_ctor_var_param.html#see-also","text":"indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"See also"},{"location":"indent_options/indent_func_def_param.html","text":"indent_func_def_param Same as indent_func_call_param , but for function definitions. Possible values are true and false , default false . Examples true Before: int booFunct(int fp, int sp) code after: int booFunct(int fp, int sp) { false Before: int booFunct(int fp, int sp) { code after: int booFunct(int fp, int sp) { See also indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_proto_param : Same as indent_func_call_param , but for function prototypes. indent_func_class_param : Same as indent_func_call_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_call_param , but for class variable constructors. indent_template_param : Same as indent_func_call_param , but for template parameter lists.","title":"indent_func_def_param"},{"location":"indent_options/indent_func_def_param.html#indent_func_def_param","text":"Same as indent_func_call_param , but for function definitions. Possible values are true and false , default false .","title":"indent_func_def_param"},{"location":"indent_options/indent_func_def_param.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_func_def_param.html#true","text":"Before: int booFunct(int fp, int sp) code after: int booFunct(int fp, int sp) {","title":"true"},{"location":"indent_options/indent_func_def_param.html#false","text":"Before: int booFunct(int fp, int sp) { code after: int booFunct(int fp, int sp) {","title":"false"},{"location":"indent_options/indent_func_def_param.html#see-also","text":"indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_proto_param : Same as indent_func_call_param , but for function prototypes. indent_func_class_param : Same as indent_func_call_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_call_param , but for class variable constructors. indent_template_param : Same as indent_func_call_param , but for template parameter lists.","title":"See also"},{"location":"indent_options/indent_func_param_double.html","text":"indent_func_param_double Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param . Possible values are true and false , default false . Probably ignores indent_with_tabs . Examples true Config: indent_func_param_double = true indent_func_proto_param = true indent_param = 2 indent_with_tabs = 2 Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp); false Config: indent_func_param_double = false indent_func_proto_param = true indent_param = 2 indent_with_tabs = 2 Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp); See also indent_columns : The number of columns to indent per level. indent_with_tabs : How to use tabs when indenting code. indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes.","title":"indent_func_param_double"},{"location":"indent_options/indent_func_param_double.html#indent_func_param_double","text":"Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param . Possible values are true and false , default false . Probably ignores indent_with_tabs .","title":"indent_func_param_double"},{"location":"indent_options/indent_func_param_double.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_func_param_double.html#true","text":"Config: indent_func_param_double = true indent_func_proto_param = true indent_param = 2 indent_with_tabs = 2 Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp);","title":"true"},{"location":"indent_options/indent_func_param_double.html#false","text":"Config: indent_func_param_double = false indent_func_proto_param = true indent_param = 2 indent_with_tabs = 2 Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp);","title":"false"},{"location":"indent_options/indent_func_param_double.html#see-also","text":"indent_columns : The number of columns to indent per level. indent_with_tabs : How to use tabs when indenting code. indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes.","title":"See also"},{"location":"indent_options/indent_func_proto_param.html","text":"indent_func_proto_param Same as indent_func_call_param , but for function prototypes. Possible values are true and false , default false . Examples true Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp); false Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp); See also indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"indent_func_proto_param"},{"location":"indent_options/indent_func_proto_param.html#indent_func_proto_param","text":"Same as indent_func_call_param , but for function prototypes. Possible values are true and false , default false .","title":"indent_func_proto_param"},{"location":"indent_options/indent_func_proto_param.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_func_proto_param.html#true","text":"Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp);","title":"true"},{"location":"indent_options/indent_func_proto_param.html#false","text":"Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp);","title":"false"},{"location":"indent_options/indent_func_proto_param.html#see-also","text":"indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors. indent_template_param : Same as indent_func_def_param , but for template parameter lists.","title":"See also"},{"location":"indent_options/indent_namespace.html","text":"indent_namespace Whether to indent the body of a 'namespace'. Possible values are true and false , default false . Examples true Code before: namespace mmm { const double v1 = 100; double value() { return 2*v1; } } Code after: namespace mmm { const double v1 = 100; double value() { return 2*v1; } } See also indent_namespace_single_indent - Whether to indent only the first namespace, and not any nested namespaces. Requires indent_namespace=true . indent_namespace_level - The number of spaces to indent a namespace block. (overrides indent_columns ) indent_namespace_limit - If the body of the namespace is longer than this number, it won't be indented. Requires indent_namespace=true .","title":"indent_namespace"},{"location":"indent_options/indent_namespace.html#indent_namespace","text":"Whether to indent the body of a 'namespace'. Possible values are true and false , default false .","title":"indent_namespace"},{"location":"indent_options/indent_namespace.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_namespace.html#true","text":"Code before: namespace mmm { const double v1 = 100; double value() { return 2*v1; } } Code after: namespace mmm { const double v1 = 100; double value() { return 2*v1; } }","title":"true"},{"location":"indent_options/indent_namespace.html#see-also","text":"indent_namespace_single_indent - Whether to indent only the first namespace, and not any nested namespaces. Requires indent_namespace=true . indent_namespace_level - The number of spaces to indent a namespace block. (overrides indent_columns ) indent_namespace_limit - If the body of the namespace is longer than this number, it won't be indented. Requires indent_namespace=true .","title":"See also"},{"location":"indent_options/indent_param.html","text":"indent_param The continuation indent for func_*_param if they are true. If non-zero, this overrides the indent. Integer value, default 0. Probably ignores indent_with_tabs . Examples Config: indent_func_proto_param = true indent_param = 2 indent_with_tabs = 2 Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp); }; See also indent_with_tabs : How to use tabs when indenting code. indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_param_double : Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param","title":"indent_param"},{"location":"indent_options/indent_param.html#indent_param","text":"The continuation indent for func_*_param if they are true. If non-zero, this overrides the indent. Integer value, default 0. Probably ignores indent_with_tabs .","title":"indent_param"},{"location":"indent_options/indent_param.html#examples","text":"Config: indent_func_proto_param = true indent_param = 2 indent_with_tabs = 2 Before: int booFunct(int fp, int sp); code after: int booFunct(int fp, int sp); };","title":"Examples"},{"location":"indent_options/indent_param.html#see-also","text":"indent_with_tabs : How to use tabs when indenting code. indent_func_call_param : Whether to indent continued function call parameters one indent level, rather than aligning parameters under the open parenthesis. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_param_double : Double the indent for indent_func_xxx_param options. Use both values of the options indent_columns and indent_param","title":"See also"},{"location":"indent_options/indent_paren_close.html","text":"indent_paren_close How to indent a close parenthesis after a newline. Possible values are integer: 0: Indent to body level (default) 1: Align under the open parenthesis 2: Indent to the brace level Examples Base example: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } 0 After: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } 1 After: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } 2 After: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } See also indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"indent_paren_close"},{"location":"indent_options/indent_paren_close.html#indent_paren_close","text":"How to indent a close parenthesis after a newline. Possible values are integer: 0: Indent to body level (default) 1: Align under the open parenthesis 2: Indent to the brace level","title":"indent_paren_close"},{"location":"indent_options/indent_paren_close.html#examples","text":"Base example: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; }","title":"Examples"},{"location":"indent_options/indent_paren_close.html#0","text":"After: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; }","title":"0"},{"location":"indent_options/indent_paren_close.html#1","text":"After: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; }","title":"1"},{"location":"indent_options/indent_paren_close.html#2","text":"After: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; }","title":"2"},{"location":"indent_options/indent_paren_close.html#see-also","text":"indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"See also"},{"location":"indent_options/indent_paren_nl.html","text":"indent_paren_nl If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis (not recommended). Possible values are true and false , default false . Examples true Before: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } false Does not change example above. See also indent_paren_close : How to indent a close parenthesis after a newline. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"indent_paren_nl"},{"location":"indent_options/indent_paren_nl.html#indent_paren_nl","text":"If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis (not recommended). Possible values are true and false , default false .","title":"indent_paren_nl"},{"location":"indent_options/indent_paren_nl.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_paren_nl.html#true","text":"Before: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; } code after: int main() { int x = 10; int y = 20; for (int i = 0; i< 3; i++ ) { std::cout << \"count: \" << i << '\\n'; } if ( x<y ) { std::cout << \"Also x is less than \" << y << '\\n'; } return 0; }","title":"true"},{"location":"indent_options/indent_paren_nl.html#false","text":"Does not change example above.","title":"false"},{"location":"indent_options/indent_paren_nl.html#see-also","text":"indent_paren_close : How to indent a close parenthesis after a newline. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"See also"},{"location":"indent_options/indent_relative_single_line_comments.html","text":"indent_relative_single_line_comments Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. Possible values are true and false , default false . Does not work with Uncrustify_d-0.70.1_f (provides same result). See also nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"indent_relative_single_line_comments"},{"location":"indent_options/indent_relative_single_line_comments.html#indent_relative_single_line_comments","text":"Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. Possible values are true and false , default false . Does not work with Uncrustify_d-0.70.1_f (provides same result).","title":"indent_relative_single_line_comments"},{"location":"indent_options/indent_relative_single_line_comments.html#see-also","text":"nl_if_brace : Add or remove newline between 'if' and '{'. indent_braces : Whether braces are indented to the body level. indent_braces_no_func : Whether to disable indenting function braces if indent_braces=true . indent_braces_no_struct : Whether to disable indenting struct braces if indent_braces=true .","title":"See also"},{"location":"indent_options/indent_semicolon_for_paren.html","text":"indent_semicolon_for_paren Whether to indent a semicolon when inside a for parenthesis. If true, aligns under the open for parenthesis. Does not work with Uncrustify_d-0.70.1_f See also: indent_first_for_expr - Whether to align the first expression to following ones if indent_semicolon_for_paren=true. (Also does not work)","title":"indent_semicolon_for_paren"},{"location":"indent_options/indent_semicolon_for_paren.html#indent_semicolon_for_paren","text":"Whether to indent a semicolon when inside a for parenthesis. If true, aligns under the open for parenthesis. Does not work with Uncrustify_d-0.70.1_f See also: indent_first_for_expr - Whether to align the first expression to following ones if indent_semicolon_for_paren=true. (Also does not work)","title":"indent_semicolon_for_paren"},{"location":"indent_options/indent_shift.html","text":"indent_shift Whether to indent continued shift expressions ('<<' and '>>') instead of aligning. Set align_left_shift =false when enabling this. Possible values are true or false , default false . Examples true Config: indent_shift = true align_left_shift = false #mandatory if indent_shift == true Code before: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; int Y = 25; std::cout << \"Y is: \" << '\\n' << \" :\" << Y << '\\n'; return 0; } After: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; int Y = 25; std::cout << \"Y is: \" << '\\n' << \" :\" << Y << '\\n'; return 0; } Note, the \"Y\" code was moved to first indent position (one tab). false False example works exactly like align_left_shift . See also indent_class : Whether the ' class ' body is indented. align_left_shift : Whether to align lines that start with '<<' with previous '<<'.","title":"indent_shift"},{"location":"indent_options/indent_shift.html#indent_shift","text":"Whether to indent continued shift expressions ('<<' and '>>') instead of aligning. Set align_left_shift =false when enabling this. Possible values are true or false , default false .","title":"indent_shift"},{"location":"indent_options/indent_shift.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_shift.html#true","text":"Config: indent_shift = true align_left_shift = false #mandatory if indent_shift == true Code before: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; int Y = 25; std::cout << \"Y is: \" << '\\n' << \" :\" << Y << '\\n'; return 0; } After: int main() { int X = 25; std::cout << \"X is: \" << '\\n' << \" :\" << X << '\\n'; int Y = 25; std::cout << \"Y is: \" << '\\n' << \" :\" << Y << '\\n'; return 0; } Note, the \"Y\" code was moved to first indent position (one tab).","title":"true"},{"location":"indent_options/indent_shift.html#false","text":"False example works exactly like align_left_shift .","title":"false"},{"location":"indent_options/indent_shift.html#see-also","text":"indent_class : Whether the ' class ' body is indented. align_left_shift : Whether to align lines that start with '<<' with previous '<<'.","title":"See also"},{"location":"indent_options/indent_sing_line_comments.html","text":"indent_sing_line_comments Spaces to indent single line ( // ) comments on lines before code. Value is unsigned number, default 0. Examples Config is indent_sing_line_comments = 3 , code before is int main() { int x = 20; // side comment // one comment std::cout << \"x: \" << x << '\\n'; // another comment std::cout << \"x+ :\" << x+10 << '\\n'; return 0; } code after is int main() { int x = 20; // side comment // one comment std::cout << \"x: \" << x << '\\n'; // another comment std::cout << \"x+ :\" << x+10 << '\\n'; return 0; } Here \"one comment\" was intended by three spaces. See also indent_relative_single_line_comments - Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. cmt_width - Limit for comments length","title":"indent_sing_line_comments"},{"location":"indent_options/indent_sing_line_comments.html#indent_sing_line_comments","text":"Spaces to indent single line ( // ) comments on lines before code. Value is unsigned number, default 0.","title":"indent_sing_line_comments"},{"location":"indent_options/indent_sing_line_comments.html#examples","text":"Config is indent_sing_line_comments = 3 , code before is int main() { int x = 20; // side comment // one comment std::cout << \"x: \" << x << '\\n'; // another comment std::cout << \"x+ :\" << x+10 << '\\n'; return 0; } code after is int main() { int x = 20; // side comment // one comment std::cout << \"x: \" << x << '\\n'; // another comment std::cout << \"x+ :\" << x+10 << '\\n'; return 0; } Here \"one comment\" was intended by three spaces.","title":"Examples"},{"location":"indent_options/indent_sing_line_comments.html#see-also","text":"indent_relative_single_line_comments - Whether to indent trailing single line ('//') comments relative to the code instead of trying to keep the same absolute column. cmt_width - Limit for comments length","title":"See also"},{"location":"indent_options/indent_square_nl.html","text":"indent_square_nl If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended). Possible values are true and false , default false . Examples Base example: int main() { int x = 10; int y = 20; manyDimentionsArr[1, 2, 3] = x; manyDimentionsArr[ 1, 2, 3] = x; return 0; } It's hard to spot difference, but there is one space in below results. true After: int main() { int x = 10; int y = 20; manyDimentionsArr[1, 2, 3] = x; manyDimentionsArr[ 1, 2, 3] = x; return 0; } false After: int main() { int x = 10; int y = 20; manyDimentionsArr[1, 2, 3] = x; manyDimentionsArr[ 1, 2, 3] = x; return 0; } See also indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_comma_paren : Whether to indent a comma when inside a parenthesis. If true, aligns under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"indent_square_nl"},{"location":"indent_options/indent_square_nl.html#indent_square_nl","text":"If an open square is followed by a newline, whether to indent the next line so that it lines up after the open square (not recommended). Possible values are true and false , default false .","title":"indent_square_nl"},{"location":"indent_options/indent_square_nl.html#examples","text":"Base example: int main() { int x = 10; int y = 20; manyDimentionsArr[1, 2, 3] = x; manyDimentionsArr[ 1, 2, 3] = x; return 0; } It's hard to spot difference, but there is one space in below results.","title":"Examples"},{"location":"indent_options/indent_square_nl.html#true","text":"After: int main() { int x = 10; int y = 20; manyDimentionsArr[1, 2, 3] = x; manyDimentionsArr[ 1, 2, 3] = x; return 0; }","title":"true"},{"location":"indent_options/indent_square_nl.html#false","text":"After: int main() { int x = 10; int y = 20; manyDimentionsArr[1, 2, 3] = x; manyDimentionsArr[ 1, 2, 3] = x; return 0; }","title":"false"},{"location":"indent_options/indent_square_nl.html#see-also","text":"indent_paren_nl : If an open parenthesis is followed by a newline, whether to indent the next line so that it lines up after the open parenthesis. indent_comma_paren : Whether to indent a comma when inside a parenthesis. If true, aligns under the open parenthesis. indent_func_def_param : Same as indent_func_def_param but for function definitions.","title":"See also"},{"location":"indent_options/indent_template_param.html","text":"indent_template_param Same as indent_func_call_param , but for template parameter lists. Possible values are true and false , default false . Does not work with Uncrustify_d-0.70.1_f (applies same changes for both true and false ). Examples true Before: int main () { ... k=GetMax<int>(i, j); n=GetMax<long>(l, m); ... } code after: int main () { ... k=GetMax<int>(i, j); n=GetMax<long>(l, m); ... } false Same as true . See also indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors.","title":"indent_template_param"},{"location":"indent_options/indent_template_param.html#indent_template_param","text":"Same as indent_func_call_param , but for template parameter lists. Possible values are true and false , default false . Does not work with Uncrustify_d-0.70.1_f (applies same changes for both true and false ).","title":"indent_template_param"},{"location":"indent_options/indent_template_param.html#examples","text":"","title":"Examples"},{"location":"indent_options/indent_template_param.html#true","text":"Before: int main () { ... k=GetMax<int>(i, j); n=GetMax<long>(l, m); ... } code after: int main () { ... k=GetMax<int>(i, j); n=GetMax<long>(l, m); ... }","title":"true"},{"location":"indent_options/indent_template_param.html#false","text":"Same as true .","title":"false"},{"location":"indent_options/indent_template_param.html#see-also","text":"indent_func_def_param : Same as indent_func_def_param but for function definitions. indent_func_proto_param : Same as indent_func_def_param , but for function prototypes. indent_func_class_param : Same as indent_func_def_param , but for class declarations. indent_func_ctor_var_param : Same as indent_func_def_param , but for class variable constructors.","title":"See also"},{"location":"indent_options/indent_with_tabs.html","text":"indent_with_tabs How to use tabs when indenting code. Possible values: 0: Spaces only 1: Indent with tabs to brace level, align with spaces (default) 2: Indent and align with tabs, using spaces when not on a tabstop Default is 1 (tabs). Examples No examples, it's hard to publish them anyway. See also indent_cmt_with_tabs - Special case for comment lines indent_columns - indent amount","title":"indent_with_tabs"},{"location":"indent_options/indent_with_tabs.html#indent_with_tabs","text":"How to use tabs when indenting code. Possible values: 0: Spaces only 1: Indent with tabs to brace level, align with spaces (default) 2: Indent and align with tabs, using spaces when not on a tabstop Default is 1 (tabs).","title":"indent_with_tabs"},{"location":"indent_options/indent_with_tabs.html#examples","text":"No examples, it's hard to publish them anyway.","title":"Examples"},{"location":"indent_options/indent_with_tabs.html#see-also","text":"indent_cmt_with_tabs - Special case for comment lines indent_columns - indent amount","title":"See also"},{"location":"indent_options/indent_xml_string.html","text":"indent_xml_string The number of spaces to indent multi-line XML strings. Requires indent_align_string=true . Example Config: indent_align_string = true indent_xml_string = 2 Before: int main() { int x = 10; std::string s = \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"; if (x<50) { s = std::string(\"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = somefunc(2000, \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = \"<xml>\" \"<data Parent=\\\"%d\\\" Name=\\\"%s\\\">\" \"<Child Id=\\\"%d\\\"/>\" \"</data>\" \"</xml>\"; } std::cout << \"s is \" << s << '\\n'; return 0; } After: int main() { int x = 10; std::string s = \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"; if (x<50) { s = std::string(\"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = somefunc(2000, \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = \"<xml>\" \"<data Parent=\\\"%d\\\" Name=\\\"%s\\\">\" \"<Child Id=\\\"%d\\\"/>\" \"</data>\" \"</xml>\"; } std::cout << \"s is \" << s << '\\n'; return 0; } Some results are not correct (tested with Uncrustify-0.69.0_f). See also indent_align_string - Indenting multiline strings Example and expected result","title":"indent_xml_string"},{"location":"indent_options/indent_xml_string.html#indent_xml_string","text":"The number of spaces to indent multi-line XML strings. Requires indent_align_string=true .","title":"indent_xml_string"},{"location":"indent_options/indent_xml_string.html#example","text":"Config: indent_align_string = true indent_xml_string = 2 Before: int main() { int x = 10; std::string s = \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"; if (x<50) { s = std::string(\"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = somefunc(2000, \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = \"<xml>\" \"<data Parent=\\\"%d\\\" Name=\\\"%s\\\">\" \"<Child Id=\\\"%d\\\"/>\" \"</data>\" \"</xml>\"; } std::cout << \"s is \" << s << '\\n'; return 0; } After: int main() { int x = 10; std::string s = \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"; if (x<50) { s = std::string(\"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = somefunc(2000, \"<xml>\" \"<heading>Reminder</heading>\" \"<body>\" \"<text>Lorem ipsum dolor sit amet</text>\" \"</body>\" \"</xml>\"); s = \"<xml>\" \"<data Parent=\\\"%d\\\" Name=\\\"%s\\\">\" \"<Child Id=\\\"%d\\\"/>\" \"</data>\" \"</xml>\"; } std::cout << \"s is \" << s << '\\n'; return 0; } Some results are not correct (tested with Uncrustify-0.69.0_f).","title":"Example"},{"location":"indent_options/indent_xml_string.html#see-also","text":"indent_align_string - Indenting multiline strings Example and expected result","title":"See also"},{"location":"newline_options/nl_after_func_body.html","text":"nl_after_func_body The number of newlines after '}' of a multi-line function body. Value is unsigned number. Note there is always one newline after function end, so really values mean: 0: option is not applied 1: no empty lines at all after this function N: there will be N-1 empty lines after function Also there are two options that override this one: nl_after_func_body_class and nl_after_func_body_one_liner . Examples Config nl_after_func_body = 3 and code before: int tf(const int ip) { return ip + 10; } int tf2(const int ip) { return ip + 10; } int main() { code after: int tf(const int ip) { return ip + 10; } int tf2(const int ip) { return ip + 10; } int main() { See also nl_after_func_body_class - The number of newlines after '}' of a multi-line function body in a class declaration. Also affects class constructors/destructors. nl_after_func_body_one_liner - The number of newlines after '}' of a single line function body. Also affects class constructors/destructors.","title":"nl_after_func_body"},{"location":"newline_options/nl_after_func_body.html#nl_after_func_body","text":"The number of newlines after '}' of a multi-line function body. Value is unsigned number. Note there is always one newline after function end, so really values mean: 0: option is not applied 1: no empty lines at all after this function N: there will be N-1 empty lines after function Also there are two options that override this one: nl_after_func_body_class and nl_after_func_body_one_liner .","title":"nl_after_func_body"},{"location":"newline_options/nl_after_func_body.html#examples","text":"Config nl_after_func_body = 3 and code before: int tf(const int ip) { return ip + 10; } int tf2(const int ip) { return ip + 10; } int main() { code after: int tf(const int ip) { return ip + 10; } int tf2(const int ip) { return ip + 10; } int main() {","title":"Examples"},{"location":"newline_options/nl_after_func_body.html#see-also","text":"nl_after_func_body_class - The number of newlines after '}' of a multi-line function body in a class declaration. Also affects class constructors/destructors. nl_after_func_body_one_liner - The number of newlines after '}' of a single line function body. Also affects class constructors/destructors.","title":"See also"},{"location":"newline_options/nl_after_func_body_one_liner.html","text":"nl_after_func_body_one_liner The number of newlines after '}' of a single line function body. Also affects class constructors/destructors. Value is unsigned number. Note there is always one newline after function end, so really values mean: 0: option is not applied 1: no empty lines at all after this function N: there will be N-1 empty lines after function Overrides nl_after_func_body . Conflicts with default value of nl_func_leave_one_liners . Example Config: nl_func_leave_one_liners = true nl_after_func_body = 2 nl_after_func_body_one_liner = 3 Code before: int olf(const int ip) { return ip + 10;} int tf(const int ip) { return ip + 10; } int main() { Code after: int olf(const int ip) { return ip + 10;} int tf(const int ip) { return ip + 10; } int main() { See also nl_after_func_body - The number of newlines after '}' of a multi-line function body. nl_func_leave_one_liners - Don't split one-line function definitions, as in int foo() { return 0; } .","title":"nl_after_func_body_one_liner"},{"location":"newline_options/nl_after_func_body_one_liner.html#nl_after_func_body_one_liner","text":"The number of newlines after '}' of a single line function body. Also affects class constructors/destructors. Value is unsigned number. Note there is always one newline after function end, so really values mean: 0: option is not applied 1: no empty lines at all after this function N: there will be N-1 empty lines after function Overrides nl_after_func_body . Conflicts with default value of nl_func_leave_one_liners .","title":"nl_after_func_body_one_liner"},{"location":"newline_options/nl_after_func_body_one_liner.html#example","text":"Config: nl_func_leave_one_liners = true nl_after_func_body = 2 nl_after_func_body_one_liner = 3 Code before: int olf(const int ip) { return ip + 10;} int tf(const int ip) { return ip + 10; } int main() { Code after: int olf(const int ip) { return ip + 10;} int tf(const int ip) { return ip + 10; } int main() {","title":"Example"},{"location":"newline_options/nl_after_func_body_one_liner.html#see-also","text":"nl_after_func_body - The number of newlines after '}' of a multi-line function body. nl_func_leave_one_liners - Don't split one-line function definitions, as in int foo() { return 0; } .","title":"See also"},{"location":"newline_options/nl_after_if.html","text":"nl_after_if Add or remove blank line after 'if' statement. Add/Force work only if the next token is not a closing brace. Possible values are ignore , add , remove and force , default ignore . Examples Add Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; remove Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; nl_after_switch - Add or remove blank line after 'switch' statement. nl_after_for - Add or remove blank line after 'for' statement. nl_after_while - Add or remove blank line after 'while' statement.","title":"nl_after_if"},{"location":"newline_options/nl_after_if.html#nl_after_if","text":"Add or remove blank line after 'if' statement. Add/Force work only if the next token is not a closing brace. Possible values are ignore , add , remove and force , default ignore .","title":"nl_after_if"},{"location":"newline_options/nl_after_if.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_after_if.html#add","text":"Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0;","title":"Add"},{"location":"newline_options/nl_after_if.html#remove","text":"Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<2000) { std::cout << \"Also x is less than \" << 2000 << '\\n'; } std::cout << \"message about y: \" << y << '\\n'; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } // else return 0; nl_after_switch - Add or remove blank line after 'switch' statement. nl_after_for - Add or remove blank line after 'for' statement. nl_after_while - Add or remove blank line after 'while' statement.","title":"remove"},{"location":"newline_options/nl_after_switch.html","text":"nl_after_switch Add or remove blank line after switch statement. Possible values are ignore , add , remove and force , default ignore . Examples add Before: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"z value processed\" << '\\n'; code after: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"z value processed\" << '\\n'; remove Before: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"Switching over z done\" << '\\n'; code after: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"Switching over z done\" << '\\n'; See also nl_before_switch - Add or remove blank line before 'switch'. nl_after_func_body_class - The number of newlines after '}' of a multi-line function body in a class declaration.","title":"nl_after_switch"},{"location":"newline_options/nl_after_switch.html#nl_after_switch","text":"Add or remove blank line after switch statement. Possible values are ignore , add , remove and force , default ignore .","title":"nl_after_switch"},{"location":"newline_options/nl_after_switch.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_after_switch.html#add","text":"Before: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"z value processed\" << '\\n'; code after: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"z value processed\" << '\\n';","title":"add"},{"location":"newline_options/nl_after_switch.html#remove","text":"Before: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"Switching over z done\" << '\\n'; code after: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } std::cout << \"Switching over z done\" << '\\n';","title":"remove"},{"location":"newline_options/nl_after_switch.html#see-also","text":"nl_before_switch - Add or remove blank line before 'switch'. nl_after_func_body_class - The number of newlines after '}' of a multi-line function body in a class declaration.","title":"See also"},{"location":"newline_options/nl_before_block_comment.html","text":"nl_before_block_comment The minimum number of newlines before a multi-line comment. Doesn't apply if after a brace open or another multi-line comment. Values is integer value. Default is 0 as \"no new newlines added\". Note: actual number of empty lines will be \" nl_before_block_comment-1 \". Setting nl_before_block_comment = 1 does not make sense because there is already one newline before multiline comment. this option conflicts with nl_max Examples If config is nl_before_block_comment = 2 only one empty line will be added: #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b; transformed to #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b; See also nl_max - The maximum number of consecutive newlines","title":"nl_before_block_comment"},{"location":"newline_options/nl_before_block_comment.html#nl_before_block_comment","text":"The minimum number of newlines before a multi-line comment. Doesn't apply if after a brace open or another multi-line comment. Values is integer value. Default is 0 as \"no new newlines added\". Note: actual number of empty lines will be \" nl_before_block_comment-1 \". Setting nl_before_block_comment = 1 does not make sense because there is already one newline before multiline comment. this option conflicts with nl_max","title":"nl_before_block_comment"},{"location":"newline_options/nl_before_block_comment.html#examples","text":"If config is nl_before_block_comment = 2 only one empty line will be added: #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b; transformed to #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b;","title":"Examples"},{"location":"newline_options/nl_before_block_comment.html#see-also","text":"nl_max - The maximum number of consecutive newlines","title":"See also"},{"location":"newline_options/nl_before_if.html","text":"nl_before_if Add or remove blank line before 'if'. Possible values are ignore , add , remove and force , default ignore . Examples Note in both examples comment line is not a \"newline\". Add Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } remove Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } See also: nl_before_do - Add or remove blank line before 'do'. nl_before_for - Add or remove blank line before 'for'. nl_before_while - Add or remove blank line before 'while'. nl_before_synchronized - Add or remove blank line before 'synchronized'. nl_before_switch - Add or remove blank line before 'switch'.","title":"nl_before_if"},{"location":"newline_options/nl_before_if.html#nl_before_if","text":"Add or remove blank line before 'if'. Possible values are ignore , add , remove and force , default ignore .","title":"nl_before_if"},{"location":"newline_options/nl_before_if.html#examples","text":"Note in both examples comment line is not a \"newline\".","title":"Examples"},{"location":"newline_options/nl_before_if.html#add","text":"Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_before_if.html#remove","text":"Code before: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } Code after: int x = 10; int y = 20; // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } x = 20 * x; if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }","title":"remove"},{"location":"newline_options/nl_before_if.html#see-also","text":"nl_before_do - Add or remove blank line before 'do'. nl_before_for - Add or remove blank line before 'for'. nl_before_while - Add or remove blank line before 'while'. nl_before_synchronized - Add or remove blank line before 'synchronized'. nl_before_switch - Add or remove blank line before 'switch'.","title":"See also:"},{"location":"newline_options/nl_before_switch.html","text":"nl_before_switch Add or remove blank line before switch statement. Possible values are ignore , add , remove and force , default ignore . Examples add Before: int z = x + y; switch(z) { case 1: code after: int z = x + y; switch(z) { case 1: remove Before: int z = x + y; switch(z) { case 1: code after: int z = x + y; switch(z) { case 1: See also nl_after_switch - Add or remove blank line after switch . nl_after_func_body_class - The number of newlines after '}' of a multi-line function body in a class declaration.","title":"nl_before_switch"},{"location":"newline_options/nl_before_switch.html#nl_before_switch","text":"Add or remove blank line before switch statement. Possible values are ignore , add , remove and force , default ignore .","title":"nl_before_switch"},{"location":"newline_options/nl_before_switch.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_before_switch.html#add","text":"Before: int z = x + y; switch(z) { case 1: code after: int z = x + y; switch(z) { case 1:","title":"add"},{"location":"newline_options/nl_before_switch.html#remove","text":"Before: int z = x + y; switch(z) { case 1: code after: int z = x + y; switch(z) { case 1:","title":"remove"},{"location":"newline_options/nl_before_switch.html#see-also","text":"nl_after_switch - Add or remove blank line after switch . nl_after_func_body_class - The number of newlines after '}' of a multi-line function body in a class declaration.","title":"See also"},{"location":"newline_options/nl_brace_else.html","text":"nl_brace_else Add or remove newline between '}' and 'else'. Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_if_brace - similar option but for if sp_brace_else - Add or remove space between } and else if on the same line nl_else_brace","title":"nl_brace_else"},{"location":"newline_options/nl_brace_else.html#nl_brace_else","text":"Add or remove newline between '}' and 'else'. Possible values are ignore , add , remove and force .","title":"nl_brace_else"},{"location":"newline_options/nl_brace_else.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_brace_else.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_brace_else.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_brace_else.html#see-also","text":"nl_if_brace - similar option but for if sp_brace_else - Add or remove space between } and else if on the same line nl_else_brace","title":"See also"},{"location":"newline_options/nl_catch_brace.html","text":"nl_catch_brace Add or remove newline before the '{' of a 'catch' statement, as in catch (decl) <here> { . Possible values are ignore , add , remove and force . Examples add Before try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } remove Before try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } See also nl_oc_catch_brace -- (OC) Add or remove newline before the { of a @catch statement, as in @catch (decl) <here> { '. nl_oc_brace_catch -- (OC) Add or remove newline between } and @catch .","title":"nl_catch_brace"},{"location":"newline_options/nl_catch_brace.html#nl_catch_brace","text":"Add or remove newline before the '{' of a 'catch' statement, as in catch (decl) <here> { . Possible values are ignore , add , remove and force .","title":"nl_catch_brace"},{"location":"newline_options/nl_catch_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_catch_brace.html#add","text":"Before try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"add"},{"location":"newline_options/nl_catch_brace.html#remove","text":"Before try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"remove"},{"location":"newline_options/nl_catch_brace.html#see-also","text":"nl_oc_catch_brace -- (OC) Add or remove newline before the { of a @catch statement, as in @catch (decl) <here> { '. nl_oc_brace_catch -- (OC) Add or remove newline between } and @catch .","title":"See also"},{"location":"newline_options/nl_else_brace.html","text":"nl_else_brace Add or remove newline between 'else' and '{', similar to nl_if_brace Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_if_brace - similar option but for if sp_else_brace - for space between else and { nl_brace_else - for removing newline after } (and before else )","title":"nl_else_brace"},{"location":"newline_options/nl_else_brace.html#nl_else_brace","text":"Add or remove newline between 'else' and '{', similar to nl_if_brace Possible values are ignore , add , remove and force .","title":"nl_else_brace"},{"location":"newline_options/nl_else_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_else_brace.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_else_brace.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_else_brace.html#see-also","text":"nl_if_brace - similar option but for if sp_else_brace - for space between else and { nl_brace_else - for removing newline after } (and before else )","title":"See also"},{"location":"newline_options/nl_elseif_brace.html","text":"nl_elseif_brace Add or remove newline between else if and { . If set to ignore , nl_if_brace is used instead. Possible values are ignore , add , remove and force . Default ignore . Examples add Before if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } After if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } ignore Configuration: nl_if_brace = force nl_elseif_brace = ignore Before if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } After if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } Here both newlines were added because of nl_if_brace setting. See also nl_else_brace - similar option but for else without if nl_if_brace - similar option but for if","title":"nl_elseif_brace"},{"location":"newline_options/nl_elseif_brace.html#nl_elseif_brace","text":"Add or remove newline between else if and { . If set to ignore , nl_if_brace is used instead. Possible values are ignore , add , remove and force . Default ignore .","title":"nl_elseif_brace"},{"location":"newline_options/nl_elseif_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_elseif_brace.html#add","text":"Before if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } After if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; }","title":"add"},{"location":"newline_options/nl_elseif_brace.html#ignore","text":"Configuration: nl_if_brace = force nl_elseif_brace = ignore Before if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } After if (x<y) { std::cout << \"x is less than \" << y << '\\n'; } else if (x < 5) { std::cout << \"Also x is than five\" << y << '\\n'; } Here both newlines were added because of nl_if_brace setting.","title":"ignore"},{"location":"newline_options/nl_elseif_brace.html#see-also","text":"nl_else_brace - similar option but for else without if nl_if_brace - similar option but for if","title":"See also"},{"location":"newline_options/nl_fdef_brace.html","text":"nl_fdef_brace Add or remove newline between function signature and { . Possible values are ignore , add , remove and force . Default ignore . Note nl_fdef_brace_cond overrides this setting. Examples add Code before int tf(const int ip) { return ip + 10; } Code after: int tf(const int ip) { return ip + 10; } remove Code before int tf(const int ip) { return ip + 10; } Code after: int tf(const int ip){ return ip + 10; } See also nl_fdef_brace_cond Add or remove newline between function signature and '{', if signature ends with ')'. nl_for_brace - similar but for for statement nl_if_brace - similar but for if","title":"nl_fdef_brace"},{"location":"newline_options/nl_fdef_brace.html#nl_fdef_brace","text":"Add or remove newline between function signature and { . Possible values are ignore , add , remove and force . Default ignore . Note nl_fdef_brace_cond overrides this setting.","title":"nl_fdef_brace"},{"location":"newline_options/nl_fdef_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_fdef_brace.html#add","text":"Code before int tf(const int ip) { return ip + 10; } Code after: int tf(const int ip) { return ip + 10; }","title":"add"},{"location":"newline_options/nl_fdef_brace.html#remove","text":"Code before int tf(const int ip) { return ip + 10; } Code after: int tf(const int ip){ return ip + 10; }","title":"remove"},{"location":"newline_options/nl_fdef_brace.html#see-also","text":"nl_fdef_brace_cond Add or remove newline between function signature and '{', if signature ends with ')'. nl_for_brace - similar but for for statement nl_if_brace - similar but for if","title":"See also"},{"location":"newline_options/nl_for_brace.html","text":"nl_for_brace Add or remove newline between 'for' and '{'. Possible values are ignore , add , remove and force . Examples Add Before: for (int i=0; i<x; i++) { sum = sum+i; } After for (int i=0; i<x; i++) { sum = sum+i; } Remove Before for (int i=0; i<x; i++) { sum = sum+i; } After for (int i=0; i<x; i++) { sum = sum+i; } See also nl_if_leave_one_liners - if one-line if statements should be changed nl_multi_line_cond - Overrides nl_for_brace , nl_if_brace , nl_switch_brace , nl_while_switch and nl_catch_brace mod_full_brace_for - Add or remove braces on a single-line 'for' statement.","title":"nl_for_brace"},{"location":"newline_options/nl_for_brace.html#nl_for_brace","text":"Add or remove newline between 'for' and '{'. Possible values are ignore , add , remove and force .","title":"nl_for_brace"},{"location":"newline_options/nl_for_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_for_brace.html#add","text":"Before: for (int i=0; i<x; i++) { sum = sum+i; } After for (int i=0; i<x; i++) { sum = sum+i; }","title":"Add"},{"location":"newline_options/nl_for_brace.html#remove","text":"Before for (int i=0; i<x; i++) { sum = sum+i; } After for (int i=0; i<x; i++) { sum = sum+i; }","title":"Remove"},{"location":"newline_options/nl_for_brace.html#see-also","text":"nl_if_leave_one_liners - if one-line if statements should be changed nl_multi_line_cond - Overrides nl_for_brace , nl_if_brace , nl_switch_brace , nl_while_switch and nl_catch_brace mod_full_brace_for - Add or remove braces on a single-line 'for' statement.","title":"See also"},{"location":"newline_options/nl_if_brace.html","text":"nl_if_brace Add or remove newline between 'if' and '{'. Possible values are ignore , add , remove and force . Note: one-line expression gets edited by default; there is nl_if_leave_one_liners option to change this behavior the else part is not affected; there is similar option nl_else_brace to control this Examples Add Before: // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } See also nl_else_brace - similar option but for else nl_if_leave_one_liners - if one-line if statements should be changed nl_multi_line_cond - Overrides nl_for_brace , nl_if_brace , nl_switch_brace and nl_catch_brace mod_full_brace_if - Add or remove braces on a single-line 'if' statement. Braces will not be removed if the braced statement contains an 'else'.","title":"nl_if_brace"},{"location":"newline_options/nl_if_brace.html#nl_if_brace","text":"Add or remove newline between 'if' and '{'. Possible values are ignore , add , remove and force . Note: one-line expression gets edited by default; there is nl_if_leave_one_liners option to change this behavior the else part is not affected; there is similar option nl_else_brace to control this","title":"nl_if_brace"},{"location":"newline_options/nl_if_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_if_brace.html#add","text":"Before: // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_if_brace.html#remove","text":"Before if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_if_brace.html#see-also","text":"nl_else_brace - similar option but for else nl_if_leave_one_liners - if one-line if statements should be changed nl_multi_line_cond - Overrides nl_for_brace , nl_if_brace , nl_switch_brace and nl_catch_brace mod_full_brace_if - Add or remove braces on a single-line 'if' statement. Braces will not be removed if the braced statement contains an 'else'.","title":"See also"},{"location":"newline_options/nl_if_leave_one_liners.html","text":"nl_if_leave_one_liners Don't split one-line if/else statements, as in 'if(...) b++;'. This option works only with nl_if_brace set to add / force Possible values are true and false . Examples true Following configuration breaks if statements but leaves one-lines: nl_if_brace = force nl_if_leave_one_liners = true Like if (a<100) c = a; if (c>5) { std::cout << \"c is larger than 5\" << '\\n'; } After if (a<100) c = a; if (c>5) { std::cout << \"c is larger than 5\" << '\\n'; } See also nl_if_brace - Add or remove newline between if and { . sp_brace_else - Add or remove space between } and else if on the same line","title":"nl_if_leave_one_liners"},{"location":"newline_options/nl_if_leave_one_liners.html#nl_if_leave_one_liners","text":"Don't split one-line if/else statements, as in 'if(...) b++;'. This option works only with nl_if_brace set to add / force Possible values are true and false .","title":"nl_if_leave_one_liners"},{"location":"newline_options/nl_if_leave_one_liners.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_if_leave_one_liners.html#true","text":"Following configuration breaks if statements but leaves one-lines: nl_if_brace = force nl_if_leave_one_liners = true Like if (a<100) c = a; if (c>5) { std::cout << \"c is larger than 5\" << '\\n'; } After if (a<100) c = a; if (c>5) { std::cout << \"c is larger than 5\" << '\\n'; }","title":"true"},{"location":"newline_options/nl_if_leave_one_liners.html#see-also","text":"nl_if_brace - Add or remove newline between if and { . sp_brace_else - Add or remove space between } and else if on the same line","title":"See also"},{"location":"newline_options/nl_max.html","text":"nl_max The maximum number of consecutive newlines (3 = 2 blank lines). Note: this option conflicts with nl_before_block_comment this option conflicts(overrides) other options like nl_max_blank_in_func Examples Removing empty lines If config is nl_max = 1 all the empty lines get removed: #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } With other options nl_max overrides some other options, listed in \"Blank line options\" section of documentation. For example, following config # Uncrustify-0.69.0_f nl_max = 0 nl_max_blank_in_func = 1 removes empty lines inside main function, but leaves others. Like #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } See also nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max_blank_in_func - The maximum number of consecutive newlines in a function.","title":"nl_max"},{"location":"newline_options/nl_max.html#nl_max","text":"The maximum number of consecutive newlines (3 = 2 blank lines). Note: this option conflicts with nl_before_block_comment this option conflicts(overrides) other options like nl_max_blank_in_func","title":"nl_max"},{"location":"newline_options/nl_max.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_max.html#removing-empty-lines","text":"If config is nl_max = 1 all the empty lines get removed: #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; }","title":"Removing empty lines"},{"location":"newline_options/nl_max.html#with-other-options","text":"nl_max overrides some other options, listed in \"Blank line options\" section of documentation. For example, following config # Uncrustify-0.69.0_f nl_max = 0 nl_max_blank_in_func = 1 removes empty lines inside main function, but leaves others. Like #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; }","title":"With other options"},{"location":"newline_options/nl_max.html#see-also","text":"nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max_blank_in_func - The maximum number of consecutive newlines in a function.","title":"See also"},{"location":"newline_options/nl_max_blank_in_func.html","text":"nl_max_blank_in_func The maximum number of consecutive newlines in a function. It's same as nl_max but works only inside functions Examples If config is nl_max_blank_in_func = 1 all the empty lines (only inside functions) will be removed: int getTwo() { return 1; } transformed to int getTwo() { return 1; } See also nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max - The maximum number of consecutive newlines.","title":"nl_max_blank_in_func"},{"location":"newline_options/nl_max_blank_in_func.html#nl_max_blank_in_func","text":"The maximum number of consecutive newlines in a function. It's same as nl_max but works only inside functions","title":"nl_max_blank_in_func"},{"location":"newline_options/nl_max_blank_in_func.html#examples","text":"If config is nl_max_blank_in_func = 1 all the empty lines (only inside functions) will be removed: int getTwo() { return 1; } transformed to int getTwo() { return 1; }","title":"Examples"},{"location":"newline_options/nl_max_blank_in_func.html#see-also","text":"nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max - The maximum number of consecutive newlines.","title":"See also"},{"location":"newline_options/nl_multi_line_cond.html","text":"nl_multi_line_cond Add a newline between ) and { if the ) is on a different line than the if / for /etc. Overrides nl_for_brace , nl_if_brace , nl_switch_brace and nl_catch_brace . Possible values are false / true . Default is false (don't override). Examples Following configuration removes newlines (because nl_if_brace = remove ) but leaves one for large if statement nl_if_brace = remove nl_multi_line_cond = true Here first if statement gets edited and second is not: if ((x<5 )&&(y<10)) { std::cout << \"case #1\" << '\\n'; } if ((x<5 )&& (y<10)) { std::cout << \"Also case #2\" << y << '\\n'; } transformed to if ((x<5 )&&(y<10)) { std::cout << \"case #1\" << '\\n'; } if ((x<5 )&& (y<10)) { std::cout << \"Also case #2\" << y << '\\n'; } See also nl_for_brace nl_if_brace nl_switch_brace nl_catch_brace","title":"nl_multi_line_cond"},{"location":"newline_options/nl_multi_line_cond.html#nl_multi_line_cond","text":"Add a newline between ) and { if the ) is on a different line than the if / for /etc. Overrides nl_for_brace , nl_if_brace , nl_switch_brace and nl_catch_brace . Possible values are false / true . Default is false (don't override).","title":"nl_multi_line_cond"},{"location":"newline_options/nl_multi_line_cond.html#examples","text":"Following configuration removes newlines (because nl_if_brace = remove ) but leaves one for large if statement nl_if_brace = remove nl_multi_line_cond = true Here first if statement gets edited and second is not: if ((x<5 )&&(y<10)) { std::cout << \"case #1\" << '\\n'; } if ((x<5 )&& (y<10)) { std::cout << \"Also case #2\" << y << '\\n'; } transformed to if ((x<5 )&&(y<10)) { std::cout << \"case #1\" << '\\n'; } if ((x<5 )&& (y<10)) { std::cout << \"Also case #2\" << y << '\\n'; }","title":"Examples"},{"location":"newline_options/nl_multi_line_cond.html#see-also","text":"nl_for_brace nl_if_brace nl_switch_brace nl_catch_brace","title":"See also"},{"location":"newline_options/nl_switch_brace.html","text":"nl_switch_brace Add or remove newline between 'switch' and '{'. Possible values are ignore , add , remove and force . Examples Add Before: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } After switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } Remove Before switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } After switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } See also nl_for_brace - similar but for for statement nl_if_brace - similar but for if","title":"nl_switch_brace"},{"location":"newline_options/nl_switch_brace.html#nl_switch_brace","text":"Add or remove newline between 'switch' and '{'. Possible values are ignore , add , remove and force .","title":"nl_switch_brace"},{"location":"newline_options/nl_switch_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_switch_brace.html#add","text":"Before: switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } After switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; }","title":"Add"},{"location":"newline_options/nl_switch_brace.html#remove","text":"Before switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; } After switch(z) { case 1: std::cout << \"One\" << '\\n'; break; case 3: std::cout << \"Three\" << '\\n'; break; default: std::cout << \"Something else\" << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_switch_brace.html#see-also","text":"nl_for_brace - similar but for for statement nl_if_brace - similar but for if","title":"See also"},{"location":"other_options/cmt_width.html","text":"cmt_width Try to limit comments width to N columns. Break comment line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like code_width ) may be used. Default configuration value is 0 (unlimited). Examples Limit 80 characters Before // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Limit by code_width Config example: # Uncrustify-0.69.0_f code_width = 80 cmt_width = code_width Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, here both lines got broken. See also code_width - similar option but for code lines Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"cmt_width"},{"location":"other_options/cmt_width.html#cmt_width","text":"Try to limit comments width to N columns. Break comment line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like code_width ) may be used. Default configuration value is 0 (unlimited).","title":"cmt_width"},{"location":"other_options/cmt_width.html#examples","text":"","title":"Examples"},{"location":"other_options/cmt_width.html#limit-80-characters","text":"Before // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n';","title":"Limit 80 characters"},{"location":"other_options/cmt_width.html#limit-by-code_width","text":"Config example: # Uncrustify-0.69.0_f code_width = 80 cmt_width = code_width Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, here both lines got broken.","title":"Limit by code_width"},{"location":"other_options/cmt_width.html#see-also","text":"code_width - similar option but for code lines Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"See also"},{"location":"other_options/code_width.html","text":"code_width Try to limit code width to N columns. Break line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like cmt_width ) may be used. Default configuration value is 0 (unlimited). Examples Limit 80 characters Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, the comment line is not broken, because comment lines are controlled with cmt_width option. See also cmt_width - similar option but for comments Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"code_width"},{"location":"other_options/code_width.html#code_width","text":"Try to limit code width to N columns. Break line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like cmt_width ) may be used. Default configuration value is 0 (unlimited).","title":"code_width"},{"location":"other_options/code_width.html#examples","text":"","title":"Examples"},{"location":"other_options/code_width.html#limit-80-characters","text":"Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, the comment line is not broken, because comment lines are controlled with cmt_width option.","title":"Limit 80 characters"},{"location":"other_options/code_width.html#see-also","text":"cmt_width - similar option but for comments Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"See also"},{"location":"other_options/disable_processing_cmt.html","text":"disable_processing_cmt Specify the marker used in comments to disable processing of part of the file. Default *INDENT-OFF* . Usually works in pair with enable_processing_cmt . Examples Config: disable_processing_cmt = \"-DISABLE-UNCRUSTIFY-\" enable_processing_cmt = \"-ENABLE-UNCRUSTIFY-\" Before #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- After #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- Note, indent was not applied to second array. See also enable_processing_cmt - similar \"closing\" option","title":"disable_processing_cmt"},{"location":"other_options/disable_processing_cmt.html#disable_processing_cmt","text":"Specify the marker used in comments to disable processing of part of the file. Default *INDENT-OFF* . Usually works in pair with enable_processing_cmt .","title":"disable_processing_cmt"},{"location":"other_options/disable_processing_cmt.html#examples","text":"Config: disable_processing_cmt = \"-DISABLE-UNCRUSTIFY-\" enable_processing_cmt = \"-ENABLE-UNCRUSTIFY-\" Before #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- After #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- Note, indent was not applied to second array.","title":"Examples"},{"location":"other_options/disable_processing_cmt.html#see-also","text":"enable_processing_cmt - similar \"closing\" option","title":"See also"},{"location":"other_options/enable_processing_cmt.html","text":"enable_processing_cmt Specify the marker used in comments to (re)enable processing in a file. Default *INDENT-ON* . Usually works in pair with disable_processing_cmt . Examples Config: disable_processing_cmt = \"-DISABLE-UNCRUSTIFY-\" enable_processing_cmt = \"-ENABLE-UNCRUSTIFY-\" Before #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- After #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- Note, indent was not applied to second array. See also disable_processing_cmt - similar \"opening\" option","title":"enable_processing_cmt"},{"location":"other_options/enable_processing_cmt.html#enable_processing_cmt","text":"Specify the marker used in comments to (re)enable processing in a file. Default *INDENT-ON* . Usually works in pair with disable_processing_cmt .","title":"enable_processing_cmt"},{"location":"other_options/enable_processing_cmt.html#examples","text":"Config: disable_processing_cmt = \"-DISABLE-UNCRUSTIFY-\" enable_processing_cmt = \"-ENABLE-UNCRUSTIFY-\" Before #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- After #define _ 0x20, #define X 0x2B, unsigned char labyrinth_a[] = { _ _ X X _ X _ '\\n', X _ X _ _ X _ '\\n', X _ _ _ _ _ _ '\\n', X X _ X X _ _ '\\n', X _ _ _ X X _ '\\n', X _ X _ X _ _ 0x00 }; #undef _ #undef X //-DISABLE-UNCRUSTIFY- #define _ 0x20, #define X 0x2C, unsigned char labyrinth_b[] = { _ _ X X X _ _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ '\\n', _ _ X _ _ X _ '\\n', X _ X _ _ X _ '\\n', X _ X X X _ _ 0x00 }; #undef _ #undef X //-ENABLE-UNCRUSTIFY- Note, indent was not applied to second array.","title":"Examples"},{"location":"other_options/enable_processing_cmt.html#see-also","text":"disable_processing_cmt - similar \"opening\" option","title":"See also"},{"location":"other_options/mod_full_brace_for.html","text":"mod_full_brace_for Add or remove braces on a single-line 'for' statement. Possible values are ignore , add , remove and force , default is ignore . Examples add Before for (int i=0; i<x; i++) sum = sum+i; for (int i=x-1; i>0; i--) sum = sum-i; after for (int i=0; i<x; i++) { sum = sum+i; } for (int i=x-1; i>0; i--) {sum = sum-i;} Note it does not add any newlines; there is nl_for_brace option to control this. remove Before for (int i=0; i<x; i++) { sum = sum+i; } for (int i=x-1; i>0; i--) {sum = sum-i;} after for (int i=0; i<x; i++) sum = sum+i; for (int i=x-1; i>0; i--) sum = sum-i; See also nl_for_brace - Add or remove newline between 'for' and '{'. mod_full_brace_if - Add or remove braces on a single-line if statement.","title":"mod_full_brace_for"},{"location":"other_options/mod_full_brace_for.html#mod_full_brace_for","text":"Add or remove braces on a single-line 'for' statement. Possible values are ignore , add , remove and force , default is ignore .","title":"mod_full_brace_for"},{"location":"other_options/mod_full_brace_for.html#examples","text":"","title":"Examples"},{"location":"other_options/mod_full_brace_for.html#add","text":"Before for (int i=0; i<x; i++) sum = sum+i; for (int i=x-1; i>0; i--) sum = sum-i; after for (int i=0; i<x; i++) { sum = sum+i; } for (int i=x-1; i>0; i--) {sum = sum-i;} Note it does not add any newlines; there is nl_for_brace option to control this.","title":"add"},{"location":"other_options/mod_full_brace_for.html#remove","text":"Before for (int i=0; i<x; i++) { sum = sum+i; } for (int i=x-1; i>0; i--) {sum = sum-i;} after for (int i=0; i<x; i++) sum = sum+i; for (int i=x-1; i>0; i--) sum = sum-i;","title":"remove"},{"location":"other_options/mod_full_brace_for.html#see-also","text":"nl_for_brace - Add or remove newline between 'for' and '{'. mod_full_brace_if - Add or remove braces on a single-line if statement.","title":"See also"},{"location":"other_options/mod_full_brace_if.html","text":"mod_full_brace_if Add or remove braces on a single-line if statement. Braces will not be removed if the braced statement contains an else . Possible values are ignore , add , remove and force , default is ignore . Examples add Following if (x<15) y=3; will be translated to if (x<15) {y=3;} Note, no newlines will be added by default. Probably it will be better to use with nl_if_brace option, like nl_if_brace = add mod_full_brace_if = add Transforms if (x<15) y=3; into if (x<15) { y=3; } remove With remove value following if (y<5) { std::cout << \"y is less than 5\" << '\\n'; } will be translated into if (y<5) std::cout << \"y is less than 5\" << '\\n'; See also nl_if_brace - Add or remove newline between 'if' and '{'.","title":"mod_full_brace_if"},{"location":"other_options/mod_full_brace_if.html#mod_full_brace_if","text":"Add or remove braces on a single-line if statement. Braces will not be removed if the braced statement contains an else . Possible values are ignore , add , remove and force , default is ignore .","title":"mod_full_brace_if"},{"location":"other_options/mod_full_brace_if.html#examples","text":"","title":"Examples"},{"location":"other_options/mod_full_brace_if.html#add","text":"Following if (x<15) y=3; will be translated to if (x<15) {y=3;} Note, no newlines will be added by default. Probably it will be better to use with nl_if_brace option, like nl_if_brace = add mod_full_brace_if = add Transforms if (x<15) y=3; into if (x<15) { y=3; }","title":"add"},{"location":"other_options/mod_full_brace_if.html#remove","text":"With remove value following if (y<5) { std::cout << \"y is less than 5\" << '\\n'; } will be translated into if (y<5) std::cout << \"y is less than 5\" << '\\n';","title":"remove"},{"location":"other_options/mod_full_brace_if.html#see-also","text":"nl_if_brace - Add or remove newline between 'if' and '{'.","title":"See also"},{"location":"spacing_options/sp_after_assign.html","text":"sp_after_assign Add or remove space after assignment operator = , += , etc. Possible values are ignore , add , remove and force . Default ignore . Overrides sp_assign . Examples add Code before: int x=10; int sum = 0; if(x<20) sum=30; for(int i=0; i<x; i++) { sum=sum+i; } Code after: int x= 10; int sum = 0; if(x<20) sum= 30; for(int i= 0; i<x; i++) { sum= sum+i; } remove Code before: int x = 10; int sum = 0; if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x =10; int sum =0; if (x<20) sum =30; for (int i=0; i<x; i++) { sum =sum+i; } See also sp_before_assign : Add or remove space before assignment operator '=', '+=', etc. sp_assign : Add or remove space around assignment operator '=', '+=', etc.","title":"sp_after_assign"},{"location":"spacing_options/sp_after_assign.html#sp_after_assign","text":"Add or remove space after assignment operator = , += , etc. Possible values are ignore , add , remove and force . Default ignore . Overrides sp_assign .","title":"sp_after_assign"},{"location":"spacing_options/sp_after_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_after_assign.html#add","text":"Code before: int x=10; int sum = 0; if(x<20) sum=30; for(int i=0; i<x; i++) { sum=sum+i; } Code after: int x= 10; int sum = 0; if(x<20) sum= 30; for(int i= 0; i<x; i++) { sum= sum+i; }","title":"add"},{"location":"spacing_options/sp_after_assign.html#remove","text":"Code before: int x = 10; int sum = 0; if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x =10; int sum =0; if (x<20) sum =30; for (int i=0; i<x; i++) { sum =sum+i; }","title":"remove"},{"location":"spacing_options/sp_after_assign.html#see-also","text":"sp_before_assign : Add or remove space before assignment operator '=', '+=', etc. sp_assign : Add or remove space around assignment operator '=', '+=', etc.","title":"See also"},{"location":"spacing_options/sp_angle_paren.html","text":"sp_angle_paren Add or remove space between > and ( as found in new List<byte>(foo); . Possible values are ignore , add , remove and force . Note, this option does not work if constructor has no parameters; that's a special case for sp_angle_paren_empty . Examples In both examples only first line gets modified. Second is not changed because of empty () . Add Before: std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>() After std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int>() Remove Before std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int> () After std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int> () See also sp_angle_word - Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . sp_angle_paren_empty - Add or remove space between > and () as found in new List<byte>(); .","title":"sp_angle_paren"},{"location":"spacing_options/sp_angle_paren.html#sp_angle_paren","text":"Add or remove space between > and ( as found in new List<byte>(foo); . Possible values are ignore , add , remove and force . Note, this option does not work if constructor has no parameters; that's a special case for sp_angle_paren_empty .","title":"sp_angle_paren"},{"location":"spacing_options/sp_angle_paren.html#examples","text":"In both examples only first line gets modified. Second is not changed because of empty () .","title":"Examples"},{"location":"spacing_options/sp_angle_paren.html#add","text":"Before: std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>() After std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int>()","title":"Add"},{"location":"spacing_options/sp_angle_paren.html#remove","text":"Before std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int> () After std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int> ()","title":"Remove"},{"location":"spacing_options/sp_angle_paren.html#see-also","text":"sp_angle_word - Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . sp_angle_paren_empty - Add or remove space between > and () as found in new List<byte>(); .","title":"See also"},{"location":"spacing_options/sp_angle_paren_empty.html","text":"sp_angle_paren_empty Add or remove space between > and ( as found in new List<byte>(); . Possible values are ignore , add , remove and force . Note, this option works only if constructor has no parameters; that's a special case for sp_angle_paren . Examples In both examples only second line gets modified. Second is not changed because some parameter is provided to constructor. Add Before: std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>() After std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>() Remove Before std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int> () After std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int>() See also sp_angle_word - Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_angle_paren_empty"},{"location":"spacing_options/sp_angle_paren_empty.html#sp_angle_paren_empty","text":"Add or remove space between > and ( as found in new List<byte>(); . Possible values are ignore , add , remove and force . Note, this option works only if constructor has no parameters; that's a special case for sp_angle_paren .","title":"sp_angle_paren_empty"},{"location":"spacing_options/sp_angle_paren_empty.html#examples","text":"In both examples only second line gets modified. Second is not changed because some parameter is provided to constructor.","title":"Examples"},{"location":"spacing_options/sp_angle_paren_empty.html#add","text":"Before: std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>() After std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>()","title":"Add"},{"location":"spacing_options/sp_angle_paren_empty.html#remove","text":"Before std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int> () After std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int>()","title":"Remove"},{"location":"spacing_options/sp_angle_paren_empty.html#see-also","text":"sp_angle_word - Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_angle_shift.html","text":"sp_angle_shift Add or remove space between > and > in >> (template stuff). Possible values are ignore , add , remove and force . Default: add . Note, if you want to remove spaces in C++ files, option sp_permit_cpp11_shift = true also needed. Examples remove Before std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int> >(20); After std::list<std::pair< int, int>> *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int>>(20); Note, config here has two lines: sp_angle_shift = remove sp_permit_cpp11_shift = true See also sp_permit_cpp11_shift - Permit removal of the space between >> in foo<bar<int> > . Note that sp_angle_shift cannot remove the space without this option. Bug #255 Template in Java and sp_angle_shift (closed)","title":"sp_angle_shift"},{"location":"spacing_options/sp_angle_shift.html#sp_angle_shift","text":"Add or remove space between > and > in >> (template stuff). Possible values are ignore , add , remove and force . Default: add . Note, if you want to remove spaces in C++ files, option sp_permit_cpp11_shift = true also needed.","title":"sp_angle_shift"},{"location":"spacing_options/sp_angle_shift.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_angle_shift.html#remove","text":"Before std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int> >(20); After std::list<std::pair< int, int>> *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int>>(20); Note, config here has two lines: sp_angle_shift = remove sp_permit_cpp11_shift = true","title":"remove"},{"location":"spacing_options/sp_angle_shift.html#see-also","text":"sp_permit_cpp11_shift - Permit removal of the space between >> in foo<bar<int> > . Note that sp_angle_shift cannot remove the space without this option. Bug #255 Template in Java and sp_angle_shift (closed)","title":"See also"},{"location":"spacing_options/sp_angle_word.html","text":"sp_angle_word Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . Possible values are ignore , add , remove and force . Examples Add Before: vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); After vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp=make_shared<int>(); Remove Before vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp =make_shared<int>(); After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>(); See also sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_angle_word"},{"location":"spacing_options/sp_angle_word.html#sp_angle_word","text":"Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . Possible values are ignore , add , remove and force .","title":"sp_angle_word"},{"location":"spacing_options/sp_angle_word.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_angle_word.html#add","text":"Before: vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); After vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp=make_shared<int>();","title":"Add"},{"location":"spacing_options/sp_angle_word.html#remove","text":"Before vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp =make_shared<int>(); After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>();","title":"Remove"},{"location":"spacing_options/sp_angle_word.html#see-also","text":"sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_assign.html","text":"sp_assign Add or remove space around assignment operator = , += , etc. Possible values are ignore , add , remove and force , default is ignore . Examples Add Before: vector<int>v ={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp = 5000; int x=4, y=5; int z= x+y; After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp = make_shared<int>(); *isp = 5000; int x = 4, y = 5; int z = x+y; Remove Before vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>(); *isp = 5000; int x=4, y = 5; int z= x+y; After vector<int>v={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp=5000; int x=4, y=5; int z=x+y; See also sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_assign"},{"location":"spacing_options/sp_assign.html#sp_assign","text":"Add or remove space around assignment operator = , += , etc. Possible values are ignore , add , remove and force , default is ignore .","title":"sp_assign"},{"location":"spacing_options/sp_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_assign.html#add","text":"Before: vector<int>v ={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp = 5000; int x=4, y=5; int z= x+y; After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp = make_shared<int>(); *isp = 5000; int x = 4, y = 5; int z = x+y;","title":"Add"},{"location":"spacing_options/sp_assign.html#remove","text":"Before vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>(); *isp = 5000; int x=4, y = 5; int z= x+y; After vector<int>v={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp=5000; int x=4, y=5; int z=x+y;","title":"Remove"},{"location":"spacing_options/sp_assign.html#see-also","text":"sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_balance_nested_parens.html","text":"sp_balance_nested_parens Whether to balance spaces inside nested parentheses. Possible values are true and false , default false . Examples true Code before: int main() { int x = 10*( 11 + (12-5)); x = 10*(11 + (12-5)); connect(server, foo(10+x), this, bar(5*ok(20))); cout << x << '\\n'; return 0; } Code after: int main() { int x = 10*( 11 + (12-5) ); x = 10*( 11 + (12-5) ); connect( server, foo(10+x), this, bar( 5*ok(20) ) ); cout << x << '\\n'; return 0; } false Does not change example above. See also sp_before_sparen : Add or remove space before ( of control statements ( if , for , switch , while etc.). sp_assign : Add or remove space around assignment operator '=', '+=', etc.","title":"sp_balance_nested_parens"},{"location":"spacing_options/sp_balance_nested_parens.html#sp_balance_nested_parens","text":"Whether to balance spaces inside nested parentheses. Possible values are true and false , default false .","title":"sp_balance_nested_parens"},{"location":"spacing_options/sp_balance_nested_parens.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_balance_nested_parens.html#true","text":"Code before: int main() { int x = 10*( 11 + (12-5)); x = 10*(11 + (12-5)); connect(server, foo(10+x), this, bar(5*ok(20))); cout << x << '\\n'; return 0; } Code after: int main() { int x = 10*( 11 + (12-5) ); x = 10*( 11 + (12-5) ); connect( server, foo(10+x), this, bar( 5*ok(20) ) ); cout << x << '\\n'; return 0; }","title":"true"},{"location":"spacing_options/sp_balance_nested_parens.html#false","text":"Does not change example above.","title":"false"},{"location":"spacing_options/sp_balance_nested_parens.html#see-also","text":"sp_before_sparen : Add or remove space before ( of control statements ( if , for , switch , while etc.). sp_assign : Add or remove space around assignment operator '=', '+=', etc.","title":"See also"},{"location":"spacing_options/sp_before_assign.html","text":"sp_before_assign Add or remove space before assignment operator = , += , etc. Possible values are ignore , add , remove and force . Default ignore . Overrides sp_assign . Examples add Code before: int x= 10; int sum = 0; if(x<20) sum= 30; for(int i=0; i<x; i++) { sum= sum+i; } Code after: int x = 10; int sum = 0; if(x<20) sum = 30; for(int i =0; i<x; i++) { sum = sum+i; } remove Code before: int x = 10; int sum = 0; if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x= 10; int sum= 0; if (x<20) sum= 30; for (int i=0; i<x; i++) { sum= sum+i; } force Works like add but makes exactly one space. See also sp_before_sparen : Add or remove space before ( of control statements ( if , for , switch , while etc.). sp_assign : Add or remove space around assignment operator '=', '+=', etc.","title":"sp_before_assign"},{"location":"spacing_options/sp_before_assign.html#sp_before_assign","text":"Add or remove space before assignment operator = , += , etc. Possible values are ignore , add , remove and force . Default ignore . Overrides sp_assign .","title":"sp_before_assign"},{"location":"spacing_options/sp_before_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_before_assign.html#add","text":"Code before: int x= 10; int sum = 0; if(x<20) sum= 30; for(int i=0; i<x; i++) { sum= sum+i; } Code after: int x = 10; int sum = 0; if(x<20) sum = 30; for(int i =0; i<x; i++) { sum = sum+i; }","title":"add"},{"location":"spacing_options/sp_before_assign.html#remove","text":"Code before: int x = 10; int sum = 0; if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } Code after: int x= 10; int sum= 0; if (x<20) sum= 30; for (int i=0; i<x; i++) { sum= sum+i; }","title":"remove"},{"location":"spacing_options/sp_before_assign.html#force","text":"Works like add but makes exactly one space.","title":"force"},{"location":"spacing_options/sp_before_assign.html#see-also","text":"sp_before_sparen : Add or remove space before ( of control statements ( if , for , switch , while etc.). sp_assign : Add or remove space around assignment operator '=', '+=', etc.","title":"See also"},{"location":"spacing_options/sp_before_sparen.html","text":"sp_before_sparen Add or remove space before ( of control statements ( if , for , switch , while etc.). Possible values are ignore , add , remove and force . Default ignore . Note, there are some special cases for this option: sp_catch_paren , sp_version_paren and sp_scope_paren . Examples add Code before: if(x<20) sum = 30; for(int i=0; i<x; i++) { sum = sum+i; } Code after: if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } remove Code before: if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } Code after: if(x<20) sum = 30; for(int i=0; i<x; i++) { sum = sum+i; } See also sp_catch_paren : Add or remove space between catch and ( in catch (something) { } . sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_version_paren (D) Add or remove space between 'version' and '(' in 'version (something) { }'. If set to ignore, sp_before_sparen is used. sp_scope_paren - (D) Add or remove space between 'scope' and '(' in 'scope (something) { }'. If set to ignore, sp_before_sparen is used.","title":"sp_before_sparen"},{"location":"spacing_options/sp_before_sparen.html#sp_before_sparen","text":"Add or remove space before ( of control statements ( if , for , switch , while etc.). Possible values are ignore , add , remove and force . Default ignore . Note, there are some special cases for this option: sp_catch_paren , sp_version_paren and sp_scope_paren .","title":"sp_before_sparen"},{"location":"spacing_options/sp_before_sparen.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_before_sparen.html#add","text":"Code before: if(x<20) sum = 30; for(int i=0; i<x; i++) { sum = sum+i; } Code after: if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; }","title":"add"},{"location":"spacing_options/sp_before_sparen.html#remove","text":"Code before: if (x<20) sum = 30; for (int i=0; i<x; i++) { sum = sum+i; } Code after: if(x<20) sum = 30; for(int i=0; i<x; i++) { sum = sum+i; }","title":"remove"},{"location":"spacing_options/sp_before_sparen.html#see-also","text":"sp_catch_paren : Add or remove space between catch and ( in catch (something) { } . sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_version_paren (D) Add or remove space between 'version' and '(' in 'version (something) { }'. If set to ignore, sp_before_sparen is used. sp_scope_paren - (D) Add or remove space between 'scope' and '(' in 'scope (something) { }'. If set to ignore, sp_before_sparen is used.","title":"See also"},{"location":"spacing_options/sp_before_tr_emb_cmt.html","text":"sp_before_tr_emb_cmt Add or remove space before a trailing or embedded comment. Possible values are ignore , add , remove and force , default ignore . If sp_num_before_tr_emb_cmt is not specified then add and force will add 1 space, else they will add sp_num_before_tr_emb_cmt spaces. Examples Add Before: int x = 10; // this is trailing comment int sum = 0;// another trailing comment After int x = 10; // this is trailing comment int sum = 0; // another trailing comment Remove Before int x = 10; // this is trailing comment int sum = 0; // another trailing comment After int x = 10;// this is trailing comment int sum = 0;// another trailing comment See also sp_num_before_tr_emb_cmt : Number of spaces before a trailing or embedded comment. sp_angle_paren : Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_before_tr_emb_cmt"},{"location":"spacing_options/sp_before_tr_emb_cmt.html#sp_before_tr_emb_cmt","text":"Add or remove space before a trailing or embedded comment. Possible values are ignore , add , remove and force , default ignore . If sp_num_before_tr_emb_cmt is not specified then add and force will add 1 space, else they will add sp_num_before_tr_emb_cmt spaces.","title":"sp_before_tr_emb_cmt"},{"location":"spacing_options/sp_before_tr_emb_cmt.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_before_tr_emb_cmt.html#add","text":"Before: int x = 10; // this is trailing comment int sum = 0;// another trailing comment After int x = 10; // this is trailing comment int sum = 0; // another trailing comment","title":"Add"},{"location":"spacing_options/sp_before_tr_emb_cmt.html#remove","text":"Before int x = 10; // this is trailing comment int sum = 0; // another trailing comment After int x = 10;// this is trailing comment int sum = 0;// another trailing comment","title":"Remove"},{"location":"spacing_options/sp_before_tr_emb_cmt.html#see-also","text":"sp_num_before_tr_emb_cmt : Number of spaces before a trailing or embedded comment. sp_angle_paren : Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_brace_catch.html","text":"sp_brace_catch Add or remove space between '}' and 'catch' if on the same line. Possible values are ignore , add , remove and force . Default ignore . Examples add Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; }catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } remove Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; }catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } See also sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_oc_catch_brace - (OC) Add or remove space before the '{' of a '@catch' statement, if the '{' and '@catch' are on the same line, as in '@catch (decl) {'. If set to ignore, sp_catch_brace is used.","title":"sp_brace_catch"},{"location":"spacing_options/sp_brace_catch.html#sp_brace_catch","text":"Add or remove space between '}' and 'catch' if on the same line. Possible values are ignore , add , remove and force . Default ignore .","title":"sp_brace_catch"},{"location":"spacing_options/sp_brace_catch.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_brace_catch.html#add","text":"Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; }catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"add"},{"location":"spacing_options/sp_brace_catch.html#remove","text":"Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; }catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"remove"},{"location":"spacing_options/sp_brace_catch.html#see-also","text":"sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_oc_catch_brace - (OC) Add or remove space before the '{' of a '@catch' statement, if the '{' and '@catch' are on the same line, as in '@catch (decl) {'. If set to ignore, sp_catch_brace is used.","title":"See also"},{"location":"spacing_options/sp_brace_else.html","text":"sp_brace_else Add or remove space between } and else if on the same line Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the left of else ; the sp_else_brace may add space to the right Force Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"sp_brace_else"},{"location":"spacing_options/sp_brace_else.html#sp_brace_else","text":"Add or remove space between } and else if on the same line Possible values are ignore , add , remove and force .","title":"sp_brace_else"},{"location":"spacing_options/sp_brace_else.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_brace_else.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the left of else ; the sp_else_brace may add space to the right","title":"Add"},{"location":"spacing_options/sp_brace_else.html#force","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Force"},{"location":"spacing_options/sp_brace_else.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"spacing_options/sp_brace_else.html#see-also","text":"nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"See also"},{"location":"spacing_options/sp_catch_brace.html","text":"sp_catch_brace Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . Possible values are ignore , add , remove and force . Default ignore . Examples add Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i){ std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } remove Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i){ std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } See also sp_catch_paren : Add or remove space between catch and ( in catch (something) { } . sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_oc_catch_brace - (OC) Add or remove space before the { of a @catch statement, if the { and @catch are on the same line, as in @catch (decl) <here> { . If set to ignore, sp_catch_brace is used.","title":"sp_catch_brace"},{"location":"spacing_options/sp_catch_brace.html#sp_catch_brace","text":"Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . Possible values are ignore , add , remove and force . Default ignore .","title":"sp_catch_brace"},{"location":"spacing_options/sp_catch_brace.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_catch_brace.html#add","text":"Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i){ std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"add"},{"location":"spacing_options/sp_catch_brace.html#remove","text":"Code before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i){ std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"remove"},{"location":"spacing_options/sp_catch_brace.html#see-also","text":"sp_catch_paren : Add or remove space between catch and ( in catch (something) { } . sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_oc_catch_brace - (OC) Add or remove space before the { of a @catch statement, if the { and @catch are on the same line, as in @catch (decl) <here> { . If set to ignore, sp_catch_brace is used.","title":"See also"},{"location":"spacing_options/sp_catch_paren.html","text":"sp_catch_paren Add or remove space between catch and ( in catch (something) { } . If set to ignore, sp_before_sparen is used. Possible values are ignore , add , remove and force . Default ignore . Examples add Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch(int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } ignore (with sp_before_sparen as remove) Config: sp_before_sparen = remove sp_catch_paren = ignore Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch(int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } remove Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch(int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } See also sp_before_sparen - More common rule, add or remove space before ( of control statements ( if , for , switch , while etc.). sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { .","title":"sp_catch_paren"},{"location":"spacing_options/sp_catch_paren.html#sp_catch_paren","text":"Add or remove space between catch and ( in catch (something) { } . If set to ignore, sp_before_sparen is used. Possible values are ignore , add , remove and force . Default ignore .","title":"sp_catch_paren"},{"location":"spacing_options/sp_catch_paren.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_catch_paren.html#add","text":"Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch(int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"add"},{"location":"spacing_options/sp_catch_paren.html#ignore-with-sp_before_sparen-as-remove","text":"Config: sp_before_sparen = remove sp_catch_paren = ignore Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch(int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"ignore (with sp_before_sparen as remove)"},{"location":"spacing_options/sp_catch_paren.html#remove","text":"Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } Code after: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch(int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"remove"},{"location":"spacing_options/sp_catch_paren.html#see-also","text":"sp_before_sparen - More common rule, add or remove space before ( of control statements ( if , for , switch , while etc.). sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { .","title":"See also"},{"location":"spacing_options/sp_cpp_lambda_assign.html","text":"sp_cpp_lambda_assign Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign . Values Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around = Examples Add Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; }; Force Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#sp_cpp_lambda_assign","text":"Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign .","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#values","text":"Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around =","title":"Values"},{"location":"spacing_options/sp_cpp_lambda_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_assign.html#add","text":"Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_assign.html#force","text":"Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_cpp_lambda_paren.html","text":"sp_cpp_lambda_paren Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force . Examples Add Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; Force Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#sp_cpp_lambda_paren","text":"Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force .","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_paren.html#add","text":"Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_paren.html#force","text":"Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_else_brace.html","text":"sp_else_brace Add or remove space between 'else' and '{' if on the same line. Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the right of else ; the sp_brace_else may add space to the left Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"sp_else_brace"},{"location":"spacing_options/sp_else_brace.html#sp_else_brace","text":"Add or remove space between 'else' and '{' if on the same line. Possible values are ignore , add , remove and force .","title":"sp_else_brace"},{"location":"spacing_options/sp_else_brace.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_else_brace.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the right of else ; the sp_brace_else may add space to the left","title":"Add"},{"location":"spacing_options/sp_else_brace.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"spacing_options/sp_else_brace.html#see-also","text":"nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"See also"},{"location":"spacing_options/sp_inside_angle.html","text":"sp_inside_angle Add or remove space inside < and > . Possible values are ignore , add , remove and force . Default ignore . Examples force and add Both add and force work in same way, add spaces inside angle braces. Before std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>(); After std::list< int > *lp = new std::list< int >(10); std::list< int > *lpe = new std::list< int >(); remove remove removes all spaces between angle braces. std::list<int > *lp = new std::list<int> (10); std::list<int> *lpe = new std::list< int>(); to std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int>(); See also sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_inside_angle"},{"location":"spacing_options/sp_inside_angle.html#sp_inside_angle","text":"Add or remove space inside < and > . Possible values are ignore , add , remove and force . Default ignore .","title":"sp_inside_angle"},{"location":"spacing_options/sp_inside_angle.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_inside_angle.html#force-and-add","text":"Both add and force work in same way, add spaces inside angle braces. Before std::list<int> *lp = new std::list<int>(10); std::list<int> *lpe = new std::list<int>(); After std::list< int > *lp = new std::list< int >(10); std::list< int > *lpe = new std::list< int >();","title":"force and add"},{"location":"spacing_options/sp_inside_angle.html#remove","text":"remove removes all spaces between angle braces. std::list<int > *lp = new std::list<int> (10); std::list<int> *lpe = new std::list< int>(); to std::list<int> *lp = new std::list<int> (10); std::list<int> *lpe = new std::list<int>();","title":"remove"},{"location":"spacing_options/sp_inside_angle.html#see-also","text":"sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_inside_fparens.html","text":"sp_inside_fparens Add or remove space inside function '(' and ')'. Possible values are ignore , add , remove and force . Examples force force adds one space between braces int getTwo() { return 2; } int main() { int a = 200; int c = getTwo(); transformed to int getTwo( ) { return 2; } int main( ) { int a = 200; int c = getTwo( ); remove remove removes all spaces between braces. int getTwo( ) { return 2; } to int getTwo() { return 2; } See also","title":"sp_inside_fparens"},{"location":"spacing_options/sp_inside_fparens.html#sp_inside_fparens","text":"Add or remove space inside function '(' and ')'. Possible values are ignore , add , remove and force .","title":"sp_inside_fparens"},{"location":"spacing_options/sp_inside_fparens.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_inside_fparens.html#force","text":"force adds one space between braces int getTwo() { return 2; } int main() { int a = 200; int c = getTwo(); transformed to int getTwo( ) { return 2; } int main( ) { int a = 200; int c = getTwo( );","title":"force"},{"location":"spacing_options/sp_inside_fparens.html#remove","text":"remove removes all spaces between braces. int getTwo( ) { return 2; } to int getTwo() { return 2; }","title":"remove"},{"location":"spacing_options/sp_inside_fparens.html#see-also","text":"","title":"See also"},{"location":"spacing_options/sp_not.html","text":"sp_not Add or remove space after the '!' (not) unary operator. Possible values are ignore , add , remove and force , default is remove . Examples Both add and force Before: int x = 10; if (!x) { std::cout << \"As true\\n\"; } After if (! x) { std::cout << \"As true\\n\"; }","title":"sp_not"},{"location":"spacing_options/sp_not.html#sp_not","text":"Add or remove space after the '!' (not) unary operator. Possible values are ignore , add , remove and force , default is remove .","title":"sp_not"},{"location":"spacing_options/sp_not.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_not.html#both-add-and-force","text":"Before: int x = 10; if (!x) { std::cout << \"As true\\n\"; } After if (! x) { std::cout << \"As true\\n\"; }","title":"Both add and force"},{"location":"spacing_options/sp_num_before_tr_emb_cmt.html","text":"sp_num_before_tr_emb_cmt Number of spaces before a trailing or embedded comment. Should be used with sp_before_tr_emb_cmt set to force or add . Integer number, default 0. Examples Base example: int x = 10; // this is trailing comment int sum = 0; // another trailing comment value is 2 Config: sp_before_tr_emb_cmt = force sp_num_before_tr_emb_cmt = 2 After: int x = 10; // this is trailing comment int sum = 0; // another trailing comment value is 0 Config: sp_before_tr_emb_cmt = force Here sp_num_before_tr_emb_cmt is not specified (so it's 0 by default). After: int x = 10; // this is trailing comment int sum = 0; // another trailing comment Note, one space distance was set. See also sp_before_tr_emb_cmt : Add or remove space before a trailing or embedded comment. sp_angle_paren : Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_num_before_tr_emb_cmt"},{"location":"spacing_options/sp_num_before_tr_emb_cmt.html#sp_num_before_tr_emb_cmt","text":"Number of spaces before a trailing or embedded comment. Should be used with sp_before_tr_emb_cmt set to force or add . Integer number, default 0.","title":"sp_num_before_tr_emb_cmt"},{"location":"spacing_options/sp_num_before_tr_emb_cmt.html#examples","text":"Base example: int x = 10; // this is trailing comment int sum = 0; // another trailing comment","title":"Examples"},{"location":"spacing_options/sp_num_before_tr_emb_cmt.html#value-is-2","text":"Config: sp_before_tr_emb_cmt = force sp_num_before_tr_emb_cmt = 2 After: int x = 10; // this is trailing comment int sum = 0; // another trailing comment","title":"value is 2"},{"location":"spacing_options/sp_num_before_tr_emb_cmt.html#value-is-0","text":"Config: sp_before_tr_emb_cmt = force Here sp_num_before_tr_emb_cmt is not specified (so it's 0 by default). After: int x = 10; // this is trailing comment int sum = 0; // another trailing comment Note, one space distance was set.","title":"value is 0"},{"location":"spacing_options/sp_num_before_tr_emb_cmt.html#see-also","text":"sp_before_tr_emb_cmt : Add or remove space before a trailing or embedded comment. sp_angle_paren : Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_permit_cpp11_shift.html","text":"sp_permit_cpp11_shift Permit removal of the space between >> in foo<bar<int> > . Note that sp_angle_shift cannot remove the space without this option. Possible values are false and true . Default is false (so it disables remove option for sp_angle_shift ) Examples false Config sp_angle_shift = remove sp_permit_cpp11_shift = false Code before: std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int> >(20); Code after: std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int> >(10); std::list<std::pair<int, int> > *lp2 = new std::list< std::pair<int, int> >(20); Note, it adds spaces instead of removing. true Config sp_angle_shift = remove sp_permit_cpp11_shift = true Code before: std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int> >(20); Code after: std::list<std::pair< int, int>> *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int>>(20); See also sp_angle_shift - Add or remove space between > and > in >> (template stuff). Bug #255 Template in Java and sp_angle_shift (closed)","title":"sp_permit_cpp11_shift"},{"location":"spacing_options/sp_permit_cpp11_shift.html#sp_permit_cpp11_shift","text":"Permit removal of the space between >> in foo<bar<int> > . Note that sp_angle_shift cannot remove the space without this option. Possible values are false and true . Default is false (so it disables remove option for sp_angle_shift )","title":"sp_permit_cpp11_shift"},{"location":"spacing_options/sp_permit_cpp11_shift.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_permit_cpp11_shift.html#false","text":"Config sp_angle_shift = remove sp_permit_cpp11_shift = false Code before: std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int> >(20); Code after: std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int> >(10); std::list<std::pair<int, int> > *lp2 = new std::list< std::pair<int, int> >(20); Note, it adds spaces instead of removing.","title":"false"},{"location":"spacing_options/sp_permit_cpp11_shift.html#true","text":"Config sp_angle_shift = remove sp_permit_cpp11_shift = true Code before: std::list<std::pair< int, int> > *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int> >(20); Code after: std::list<std::pair< int, int>> *lp = new std::list< std::pair<int, int>>(10); std::list<std::pair<int, int>> *lp2 = new std::list< std::pair<int, int>>(20);","title":"true"},{"location":"spacing_options/sp_permit_cpp11_shift.html#see-also","text":"sp_angle_shift - Add or remove space between > and > in >> (template stuff). Bug #255 Template in Java and sp_angle_shift (closed)","title":"See also"},{"location":"spacing_options/sp_try_brace.html","text":"sp_try_brace Add or remove space between try and { if on the same line. Possible values are ignore , add , remove and force . Default ignore . Examples add Before: try{ std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } remove Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After: try{ std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } See also sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_finally_brace - Add or remove space between finally and { if on the same line. sp_brace_finally - Add or remove space between { and finally if on the same line.","title":"sp_try_brace"},{"location":"spacing_options/sp_try_brace.html#sp_try_brace","text":"Add or remove space between try and { if on the same line. Possible values are ignore , add , remove and force . Default ignore .","title":"sp_try_brace"},{"location":"spacing_options/sp_try_brace.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_try_brace.html#add","text":"Before: try{ std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"add"},{"location":"spacing_options/sp_try_brace.html#remove","text":"Before: try { std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; } After: try{ std::cout << \"Throwing an integer exception...\\n\"; throw 42; } catch (int i) { std::cout << \" the integer exception was caught, with value: \" << i << '\\n'; }","title":"remove"},{"location":"spacing_options/sp_try_brace.html#see-also","text":"sp_catch_brace - Add or remove space before the { of a catch statement, if the { and catch are on the same line, as in catch (decl) <here> { . sp_finally_brace - Add or remove space between finally and { if on the same line. sp_brace_finally - Add or remove space between { and finally if on the same line.","title":"See also"}]}