{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available. More info on configuration options The uncrustify itself is a good source of information. Try uncrustify --show-config and read until end of file. Also demo page of this project has a lot of examples Commands There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options Ready configs for style guides Will be implemented later.","title":"Home"},{"location":"index.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available.","title":"Uncrustify configuration examples"},{"location":"index.html#more-info-on-configuration-options","text":"The uncrustify itself is a good source of information. Try uncrustify --show-config and read until end of file. Also demo page of this project has a lot of examples","title":"More info on configuration options"},{"location":"index.html#commands","text":"There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options","title":"Commands"},{"location":"index.html#ready-configs-for-style-guides","text":"Will be implemented later.","title":"Ready configs for style guides"},{"location":"about.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"About"},{"location":"about.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"Uncrustify configuration examples"},{"location":"sp_assign.html","text":"sp_assign This page content wasn't created yet.","title":"sp_assign"},{"location":"sp_assign.html#sp_assign","text":"This page content wasn't created yet.","title":"sp_assign"},{"location":"other_options/cmt_width.html","text":"cmt_width Try to limit comments width to N columns. Break comment line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like code_width ) may be used. Default configuration value is 0 (unlimited). Examples Limit 80 characters Before // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Limit by code_width Config example: # Uncrustify-0.69.0_f code_width = 80 cmt_width = code_width Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, here both lines got broken. See also code_width - similar option but for code lines Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"cmt_width"},{"location":"other_options/cmt_width.html#cmt_width","text":"Try to limit comments width to N columns. Break comment line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like code_width ) may be used. Default configuration value is 0 (unlimited).","title":"cmt_width"},{"location":"other_options/cmt_width.html#examples","text":"","title":"Examples"},{"location":"other_options/cmt_width.html#limit-80-characters","text":"Before // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n';","title":"Limit 80 characters"},{"location":"other_options/cmt_width.html#limit-by-code_width","text":"Config example: # Uncrustify-0.69.0_f code_width = 80 cmt_width = code_width Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, here both lines got broken.","title":"Limit by code_width"},{"location":"other_options/cmt_width.html#see-also","text":"code_width - similar option but for code lines Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"See also"},{"location":"other_options/code_width.html","text":"code_width Try to limit code width to N columns. Break line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like cmt_width ) may be used. Default configuration value is 0 (unlimited). Examples Limit 80 characters Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, the comment line is not broken, because comment lines are controlled with cmt_width option. See also cmt_width - similar option but for comments Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"code_width"},{"location":"other_options/code_width.html#code_width","text":"Try to limit code width to N columns. Break line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like cmt_width ) may be used. Default configuration value is 0 (unlimited).","title":"code_width"},{"location":"other_options/code_width.html#examples","text":"","title":"Examples"},{"location":"other_options/code_width.html#limit-80-characters","text":"Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, the comment line is not broken, because comment lines are controlled with cmt_width option.","title":"Limit 80 characters"},{"location":"other_options/code_width.html#see-also","text":"cmt_width - similar option but for comments Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"See also"},{"location":"spacing_options/sp_cpp_lambda_assign.html","text":"sp_cpp_lambda_assign Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign . Values Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around = Examples Add Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; }; Force Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#sp_cpp_lambda_assign","text":"Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign .","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#values","text":"Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around =","title":"Values"},{"location":"spacing_options/sp_cpp_lambda_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_assign.html#add","text":"Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_assign.html#force","text":"Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_cpp_lambda_paren.html","text":"sp_cpp_lambda_paren Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force . Examples Add Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; Force Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#sp_cpp_lambda_paren","text":"Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force .","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_paren.html#add","text":"Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_paren.html#force","text":"Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_not.html","text":"sp_not Add or remove space after the '!' (not) unary operator. Possible values are ignore , add , remove and force , default is remove . Examples Both add and force Before: int x = 10; if (!x) { std::cout << \"As true\\n\"; } After if (! x) { std::cout << \"As true\\n\"; }","title":"sp_not"},{"location":"spacing_options/sp_not.html#sp_not","text":"Add or remove space after the '!' (not) unary operator. Possible values are ignore , add , remove and force , default is remove .","title":"sp_not"},{"location":"spacing_options/sp_not.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_not.html#both-add-and-force","text":"Before: int x = 10; if (!x) { std::cout << \"As true\\n\"; } After if (! x) { std::cout << \"As true\\n\"; }","title":"Both add and force"}]}