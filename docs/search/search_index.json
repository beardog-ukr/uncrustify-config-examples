{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available. More info on configuration options The uncrustify itself is a good source of information. Try uncrustify --show-config and read until end of file. Also demo page of this project has a lot of examples Commands There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options Ready configs for style guides Will be implemented later.","title":"Home"},{"location":"index.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. However right now only few examples are available.","title":"Uncrustify configuration examples"},{"location":"index.html#more-info-on-configuration-options","text":"The uncrustify itself is a good source of information. Try uncrustify --show-config and read until end of file. Also demo page of this project has a lot of examples","title":"More info on configuration options"},{"location":"index.html#commands","text":"There are few groups of uncrustify configuration rules: Spacing options Indenting options Newline adding and removing options Positioning options Line splitting options Code alignment options Comment modification options Code modifying options Preprocessor options Other options","title":"Commands"},{"location":"index.html#ready-configs-for-style-guides","text":"Will be implemented later.","title":"Ready configs for style guides"},{"location":"about.html","text":"Uncrustify configuration examples The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"About"},{"location":"about.html#uncrustify-configuration-examples","text":"The uncrustify is a tool that helps to format code according to some rules. There are more than six hundreds processing rules for now. This project aims to provide definite examples for each rule. Also there will be provided ready-to-use configurations for existing style guides. This project is independent from uncrustify .","title":"Uncrustify configuration examples"},{"location":"sp_assign.html","text":"sp_assign This page content wasn't created yet.","title":"sp_assign"},{"location":"sp_assign.html#sp_assign","text":"This page content wasn't created yet.","title":"sp_assign"},{"location":"newline_options/nl_before_block_comment.html","text":"nl_before_block_comment The minimum number of newlines before a multi-line comment. Doesn't apply if after a brace open or another multi-line comment. Values is integer value. Default is 0 as \"no new newlines added\". Note: actual number of empty lines will be \" nl_before_block_comment-1 \". Setting nl_before_block_comment = 1 does not make sense because there is already one newline before multiline comment. this option conflicts with nl_max Examples If config is nl_before_block_comment = 2 only one empty line will be added: #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b; transformed to #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b; See also nl_max - The maximum number of consecutive newlines","title":"nl_before_block_comment"},{"location":"newline_options/nl_before_block_comment.html#nl_before_block_comment","text":"The minimum number of newlines before a multi-line comment. Doesn't apply if after a brace open or another multi-line comment. Values is integer value. Default is 0 as \"no new newlines added\". Note: actual number of empty lines will be \" nl_before_block_comment-1 \". Setting nl_before_block_comment = 1 does not make sense because there is already one newline before multiline comment. this option conflicts with nl_max","title":"nl_before_block_comment"},{"location":"newline_options/nl_before_block_comment.html#examples","text":"If config is nl_before_block_comment = 2 only one empty line will be added: #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b; transformed to #include <iostream> /* Some comment * (this is multiline comment) */ int main() { int x = 10; int y = 20; /* Another variables * (this is multiline comment) */ int a = 20; int b = 10; int c = b;","title":"Examples"},{"location":"newline_options/nl_before_block_comment.html#see-also","text":"nl_max - The maximum number of consecutive newlines","title":"See also"},{"location":"newline_options/nl_brace_else.html","text":"nl_brace_else Add or remove newline between '}' and 'else'. Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_if_brace - similar option but for if sp_brace_else - Add or remove space between } and else if on the same line nl_else_brace","title":"nl_brace_else"},{"location":"newline_options/nl_brace_else.html#nl_brace_else","text":"Add or remove newline between '}' and 'else'. Possible values are ignore , add , remove and force .","title":"nl_brace_else"},{"location":"newline_options/nl_brace_else.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_brace_else.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_brace_else.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_brace_else.html#see-also","text":"nl_if_brace - similar option but for if sp_brace_else - Add or remove space between } and else if on the same line nl_else_brace","title":"See also"},{"location":"newline_options/nl_else_brace.html","text":"nl_else_brace Add or remove newline between 'else' and '{', similar to nl_if_brace Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_if_brace - similar option but for if sp_else_brace - for space between else and { nl_brace_else - for removing newline after } (and before else )","title":"nl_else_brace"},{"location":"newline_options/nl_else_brace.html#nl_else_brace","text":"Add or remove newline between 'else' and '{', similar to nl_if_brace Possible values are ignore , add , remove and force .","title":"nl_else_brace"},{"location":"newline_options/nl_else_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_else_brace.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_else_brace.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_else_brace.html#see-also","text":"nl_if_brace - similar option but for if sp_else_brace - for space between else and { nl_brace_else - for removing newline after } (and before else )","title":"See also"},{"location":"newline_options/nl_if_brace.html","text":"nl_if_brace Add or remove newline between 'if' and '{'. Possible values are ignore , add , remove and force . Note: one-line expression gets edited by default; there is nl_if_leave_one_liners option to change this behavior the else part is not affected; there is similar option nl_else_brace to control this Examples Add Before: // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } See also nl_else_brace - similar option but for else nl_if_leave_one_liners - if one-line if statements should be changed nl_multi_line_cond - Overrides nl_for_brace , nl_if_brace , nl_switch_brace , nl_while_switch and nl_catch_brace mod_full_brace_if - Add or remove braces on a single-line 'if' statement. Braces will not be removed if the braced statement contains an 'else'.","title":"nl_if_brace"},{"location":"newline_options/nl_if_brace.html#nl_if_brace","text":"Add or remove newline between 'if' and '{'. Possible values are ignore , add , remove and force . Note: one-line expression gets edited by default; there is nl_if_leave_one_liners option to change this behavior the else part is not affected; there is similar option nl_else_brace to control this","title":"nl_if_brace"},{"location":"newline_options/nl_if_brace.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_if_brace.html#add","text":"Before: // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After // One-line if if (x<15) y=30; // Single if if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } // if with else if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Add"},{"location":"newline_options/nl_if_brace.html#remove","text":"Before if (x<5) { std::cout << \"x is less than 5\" << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }","title":"Remove"},{"location":"newline_options/nl_if_brace.html#see-also","text":"nl_else_brace - similar option but for else nl_if_leave_one_liners - if one-line if statements should be changed nl_multi_line_cond - Overrides nl_for_brace , nl_if_brace , nl_switch_brace , nl_while_switch and nl_catch_brace mod_full_brace_if - Add or remove braces on a single-line 'if' statement. Braces will not be removed if the braced statement contains an 'else'.","title":"See also"},{"location":"newline_options/nl_max.html","text":"nl_max The maximum number of consecutive newlines (3 = 2 blank lines). Note: this option conflicts with nl_before_block_comment this option conflicts(overrides) other options like nl_max_blank_in_func Examples Removing empty lines If config is nl_max = 1 all the empty lines get removed: #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } With other options nl_max overrides some other options, listed in \"Blank line options\" section of documentation. For example, following config # Uncrustify-0.69.0_f nl_max = 0 nl_max_blank_in_func = 1 removes empty lines inside main function, but leaves others. Like #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } See also nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max_blank_in_func - The maximum number of consecutive newlines in a function.","title":"nl_max"},{"location":"newline_options/nl_max.html#nl_max","text":"The maximum number of consecutive newlines (3 = 2 blank lines). Note: this option conflicts with nl_before_block_comment this option conflicts(overrides) other options like nl_max_blank_in_func","title":"nl_max"},{"location":"newline_options/nl_max.html#examples","text":"","title":"Examples"},{"location":"newline_options/nl_max.html#removing-empty-lines","text":"If config is nl_max = 1 all the empty lines get removed: #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; }","title":"Removing empty lines"},{"location":"newline_options/nl_max.html#with-other-options","text":"nl_max overrides some other options, listed in \"Blank line options\" section of documentation. For example, following config # Uncrustify-0.69.0_f nl_max = 0 nl_max_blank_in_func = 1 removes empty lines inside main function, but leaves others. Like #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; } transformed to #include <iostream> int gg = 10; int main() { int a = 20; int b = 10; int c = b; if (a<100) { c = a; } std::cout << \"Finally c is \" << c << '\\n'; }","title":"With other options"},{"location":"newline_options/nl_max.html#see-also","text":"nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max_blank_in_func - The maximum number of consecutive newlines in a function.","title":"See also"},{"location":"newline_options/nl_max_blank_in_func.html","text":"nl_max_blank_in_func The maximum number of consecutive newlines in a function. It's same as nl_max but works only inside functions Examples If config is nl_max_blank_in_func = 1 all the empty lines (only inside functions) will be removed: int getTwo() { return 1; } transformed to int getTwo() { return 1; } See also nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max - The maximum number of consecutive newlines.","title":"nl_max_blank_in_func"},{"location":"newline_options/nl_max_blank_in_func.html#nl_max_blank_in_func","text":"The maximum number of consecutive newlines in a function. It's same as nl_max but works only inside functions","title":"nl_max_blank_in_func"},{"location":"newline_options/nl_max_blank_in_func.html#examples","text":"If config is nl_max_blank_in_func = 1 all the empty lines (only inside functions) will be removed: int getTwo() { return 1; } transformed to int getTwo() { return 1; }","title":"Examples"},{"location":"newline_options/nl_max_blank_in_func.html#see-also","text":"nl_before_block_comment - The minimum number of newlines before a multi-line comment. nl_max - The maximum number of consecutive newlines.","title":"See also"},{"location":"other_options/cmt_width.html","text":"cmt_width Try to limit comments width to N columns. Break comment line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like code_width ) may be used. Default configuration value is 0 (unlimited). Examples Limit 80 characters Before // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Limit by code_width Config example: # Uncrustify-0.69.0_f code_width = 80 cmt_width = code_width Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, here both lines got broken. See also code_width - similar option but for code lines Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"cmt_width"},{"location":"other_options/cmt_width.html#cmt_width","text":"Try to limit comments width to N columns. Break comment line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like code_width ) may be used. Default configuration value is 0 (unlimited).","title":"cmt_width"},{"location":"other_options/cmt_width.html#examples","text":"","title":"Examples"},{"location":"other_options/cmt_width.html#limit-80-characters","text":"Before // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n';","title":"Limit 80 characters"},{"location":"other_options/cmt_width.html#limit-by-code_width","text":"Config example: # Uncrustify-0.69.0_f code_width = 80 cmt_width = code_width Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox // jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, here both lines got broken.","title":"Limit by code_width"},{"location":"other_options/cmt_width.html#see-also","text":"code_width - similar option but for code lines Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"See also"},{"location":"other_options/code_width.html","text":"code_width Try to limit code width to N columns. Break line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like cmt_width ) may be used. Default configuration value is 0 (unlimited). Examples Limit 80 characters Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, the comment line is not broken, because comment lines are controlled with cmt_width option. See also cmt_width - similar option but for comments Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"code_width"},{"location":"other_options/code_width.html#code_width","text":"Try to limit code width to N columns. Break line if it's too long. Possible values are 0 for no limits or integer value for some. Also another integer configuration value (like cmt_width ) may be used. Default configuration value is 0 (unlimited).","title":"code_width"},{"location":"other_options/code_width.html#examples","text":"","title":"Examples"},{"location":"other_options/code_width.html#limit-80-characters","text":"Before int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; After int x = 10 + 10 + 12 + 13 + 14 + 15 + 16 + 17 + 18 + 19 + 20 + 21 + 22 + 23 + 24 + 25; // The quick brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog. std::cout << \"x is \" << x << '\\n'; Note, the comment line is not broken, because comment lines are controlled with cmt_width option.","title":"Limit 80 characters"},{"location":"other_options/code_width.html#see-also","text":"cmt_width - similar option but for comments Special line breaking cases: ls_for_split_full , ls_func_split_full and ls_code_width","title":"See also"},{"location":"spacing_options/sp_angle_word.html","text":"sp_angle_word Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . Possible values are ignore , add , remove and force . Examples Add Before: vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); After vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp=make_shared<int>(); Remove Before vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp =make_shared<int>(); After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>(); See also sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_angle_word"},{"location":"spacing_options/sp_angle_word.html#sp_angle_word","text":"Add or remove space between > and a word as in List<byte> m; or template <typename T> static ... . Possible values are ignore , add , remove and force .","title":"sp_angle_word"},{"location":"spacing_options/sp_angle_word.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_angle_word.html#add","text":"Before: vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); After vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp=make_shared<int>();","title":"Add"},{"location":"spacing_options/sp_angle_word.html#remove","text":"Before vector<int> v = {7, 5, 16, 8}; shared_ptr<int> isp =make_shared<int>(); After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>();","title":"Remove"},{"location":"spacing_options/sp_angle_word.html#see-also","text":"sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_assign.html","text":"sp_assign Add or remove space around assignment operator = , += , etc. Possible values are ignore , add , remove and force , default is ignore . Examples Add Before: vector<int>v ={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp = 5000; int x=4, y=5; int z= x+y; After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp = make_shared<int>(); *isp = 5000; int x = 4, y = 5; int z = x+y; Remove Before vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>(); *isp = 5000; int x=4, y = 5; int z= x+y; After vector<int>v={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp=5000; int x=4, y=5; int z=x+y; See also sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"sp_assign"},{"location":"spacing_options/sp_assign.html#sp_assign","text":"Add or remove space around assignment operator = , += , etc. Possible values are ignore , add , remove and force , default is ignore .","title":"sp_assign"},{"location":"spacing_options/sp_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_assign.html#add","text":"Before: vector<int>v ={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp = 5000; int x=4, y=5; int z= x+y; After vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp = make_shared<int>(); *isp = 5000; int x = 4, y = 5; int z = x+y;","title":"Add"},{"location":"spacing_options/sp_assign.html#remove","text":"Before vector<int>v = {7, 5, 16, 8}; shared_ptr<int>isp =make_shared<int>(); *isp = 5000; int x=4, y = 5; int z= x+y; After vector<int>v={7, 5, 16, 8}; shared_ptr<int>isp=make_shared<int>(); *isp=5000; int x=4, y=5; int z=x+y;","title":"Remove"},{"location":"spacing_options/sp_assign.html#see-also","text":"sp_angle_paren - Add or remove space between > and ( as found in new List<byte>(foo); .","title":"See also"},{"location":"spacing_options/sp_brace_else.html","text":"sp_brace_else Add or remove space between } and else if on the same line Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the left of else ; the sp_else_brace may add space to the right Force Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"sp_brace_else"},{"location":"spacing_options/sp_brace_else.html#sp_brace_else","text":"Add or remove space between } and else if on the same line Possible values are ignore , add , remove and force .","title":"sp_brace_else"},{"location":"spacing_options/sp_brace_else.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_brace_else.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the left of else ; the sp_else_brace may add space to the right","title":"Add"},{"location":"spacing_options/sp_brace_else.html#force","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Force"},{"location":"spacing_options/sp_brace_else.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"spacing_options/sp_brace_else.html#see-also","text":"nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"See also"},{"location":"spacing_options/sp_cpp_lambda_assign.html","text":"sp_cpp_lambda_assign Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign . Values Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around = Examples Add Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; }; Force Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#sp_cpp_lambda_assign","text":"Add or remove space around '=' in C++11 lambda capture specifications. Overrides sp_assign .","title":"sp_cpp_lambda_assign"},{"location":"spacing_options/sp_cpp_lambda_assign.html#values","text":"Possible values are ignore - option is not used add - spaces are added (only if there are no one) remove - spaces are removed force - sets exactly one space around =","title":"Values"},{"location":"spacing_options/sp_cpp_lambda_assign.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_assign.html#add","text":"Before: auto func1 = [=](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_assign.html#force","text":"Before auto func1 = [ =](int i) { std::cout << i+x << ' '; }; After auto func1 = [ = ](int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_cpp_lambda_paren.html","text":"sp_cpp_lambda_paren Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force . Examples Add Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; Force Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#sp_cpp_lambda_paren","text":"Add or remove space after the capture specification in C++11 lambda . Possible values are ignore , add , remove and force .","title":"sp_cpp_lambda_paren"},{"location":"spacing_options/sp_cpp_lambda_paren.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_cpp_lambda_paren.html#add","text":"Before: std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x](int i) { std::cout << i+x << ' '; }; After std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Add"},{"location":"spacing_options/sp_cpp_lambda_paren.html#force","text":"Before std::for_each(c.begin(), c.end(), [](int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; }; After (note lines 1 and 6) std::for_each(c.begin(), c.end(), [] (int i){ std::cout << i << ' '; }); std::cout << '\\n'; auto func1 = [x] (int i) { std::cout << i+x << ' '; };","title":"Force"},{"location":"spacing_options/sp_else_brace.html","text":"sp_else_brace Add or remove space between 'else' and '{' if on the same line. Possible values are ignore , add , remove and force . Examples Add Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the right of else ; the sp_brace_else may add space to the left Remove Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } See also nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"sp_else_brace"},{"location":"spacing_options/sp_else_brace.html#sp_else_brace","text":"Add or remove space between 'else' and '{' if on the same line. Possible values are ignore , add , remove and force .","title":"sp_else_brace"},{"location":"spacing_options/sp_else_brace.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_else_brace.html#add","text":"Before: if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; }else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } Here space is added to the right of else ; the sp_brace_else may add space to the left","title":"Add"},{"location":"spacing_options/sp_else_brace.html#remove","text":"Before if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else { std::cout << \"Also x is more (or equal) than \" << y << '\\n'; } After if (x<y) { std::cout << \"Also x is less than \" << y << '\\n'; } else{ std::cout << \"Also x is more (or equal) than \" << y << '\\n'; }","title":"Remove"},{"location":"spacing_options/sp_else_brace.html#see-also","text":"nl_brace_else - Add or remove newline between } and else . nl_elseif_brace - Add or remove newline between else if and { .","title":"See also"},{"location":"spacing_options/sp_inside_fparens.html","text":"sp_inside_fparens Add or remove space inside function '(' and ')'. Possible values are ignore , add , remove and force . Examples force force adds one space between braces int getTwo() { return 2; } int main() { int a = 200; int c = getTwo(); transformed to int getTwo( ) { return 2; } int main( ) { int a = 200; int c = getTwo( ); remove remove removes all spaces between braces. int getTwo( ) { return 2; } to int getTwo() { return 2; } See also","title":"sp_inside_fparens"},{"location":"spacing_options/sp_inside_fparens.html#sp_inside_fparens","text":"Add or remove space inside function '(' and ')'. Possible values are ignore , add , remove and force .","title":"sp_inside_fparens"},{"location":"spacing_options/sp_inside_fparens.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_inside_fparens.html#force","text":"force adds one space between braces int getTwo() { return 2; } int main() { int a = 200; int c = getTwo(); transformed to int getTwo( ) { return 2; } int main( ) { int a = 200; int c = getTwo( );","title":"force"},{"location":"spacing_options/sp_inside_fparens.html#remove","text":"remove removes all spaces between braces. int getTwo( ) { return 2; } to int getTwo() { return 2; }","title":"remove"},{"location":"spacing_options/sp_inside_fparens.html#see-also","text":"","title":"See also"},{"location":"spacing_options/sp_not.html","text":"sp_not Add or remove space after the '!' (not) unary operator. Possible values are ignore , add , remove and force , default is remove . Examples Both add and force Before: int x = 10; if (!x) { std::cout << \"As true\\n\"; } After if (! x) { std::cout << \"As true\\n\"; }","title":"sp_not"},{"location":"spacing_options/sp_not.html#sp_not","text":"Add or remove space after the '!' (not) unary operator. Possible values are ignore , add , remove and force , default is remove .","title":"sp_not"},{"location":"spacing_options/sp_not.html#examples","text":"","title":"Examples"},{"location":"spacing_options/sp_not.html#both-add-and-force","text":"Before: int x = 10; if (!x) { std::cout << \"As true\\n\"; } After if (! x) { std::cout << \"As true\\n\"; }","title":"Both add and force"}]}